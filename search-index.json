[{"content":"網路上基礎設定的教學不少，這裡補足安全方面的設定。\nTrueNAS 預設沒有開啟 SMB 簽名及加密，新版又取消了 auxiliary parameters 欄位，所以不要懷疑自己找不到，搞老半天就這個能用。\n修改方式 cli 三個字要打出來。\ncli service smb update smb_options=\u0026#34;server signing = required\\nserver smb encrypt = required\\nclient smb encrypt = required\\ninherit owner=yes\\ninherit permissions=yes\u0026#34;\rinherit owner/permissions 是繼承父資料夾的擁有者/權限。另外，改 /etc/smb4.conf 沒用，該文件重開機會自動重置。\n修改時可能需要重新設定時間，TrueNAS 不管在哪個時區（看過歐美亞洲都問過一樣問題）都有可能慢八小時，\nSMB 測試指令 使用 nmap 在別台電腦測試 NAS SMB 狀態的指令們。\n# 出現 \u0026#34;Message signing enabled but not required\u0026#34; 則表示沒有啟用簽名 sudo nmap -sS -sV -Pn -p 445 --script=\u0026#34;smb-security-mode\u0026#34; \u0026lt;IP\u0026gt; sudo nmap -sS -sV -Pn -p 445 --script=\u0026#34;smb-security-mode\u0026#34; \u0026lt;IP\u0026gt; sudo testparm -s sudo smbstatus\r結語 不過 MAC 開加密之後速度變超慢，最後還是關了。\nReference:\nSMB 設定 TrueNAS 設定\n","date":"2024-05-06","id":0,"permalink":"/docs/nas/truenas-smb-security/","summary":"網路上基礎設定的教學不少，這裡補足安全方面的設定。\nTrueNAS 預設沒有開啟 SMB 簽名及加密，新版又取消了 auxiliary parameters 欄位，所以不要懷疑自己找不到，搞老半天就這個能用。\n修改方式 cli 三個字要打出來。\ncli service smb update smb_options=\u0026#34;server signing = required\\nserver smb encrypt = required\\nclient smb encrypt = required\\ninherit owner=yes\\ninherit permissions=yes\u0026#34;\rinherit owner/permissions 是繼承父資料夾的擁有者/權限。另外，改 /etc/smb4.","tags":[],"title":"TrueNas SMB 簽名及加密設定"},{"content":"前言 弄完基礎的檔案分享設定之後就是玩 docker，本文列出幾個常見的 docker-compose.yml 以便一鍵部屬。\n還有個好消息，TrueNAS 在 2024/10 月版本將要放棄 k3s 改用 docker，這裡先放上幾個 docker-compose.yml，對相簿選擇障礙的可以看這裡。\nImmich 版本：v1.108.0\n這是最推薦的自架相簿，有些人可能會擔心他會破壞資料夾結構，尤其是攝影師，不過使用外部庫掛載就沒有這個問題。\n由於現在還在非常積極發展的階段，建議掛載後加上:ro唯獨以免誤刪。\ndocker-compose.yml: 改掛載路徑就可用 name: immich services: immich-server: container_name: immich_server image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release} volumes: - ${UPLOAD_LOCATION}:/usr/src/app/upload - /home/user/photo/immich:/usr/src/app/external:ro - /etc/localtime:/etc/localtime:ro env_file: - .env ports: - 2283:3001 depends_on: - redis - database restart: always immich-machine-learning: container_name: immich_machine_learning # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag. # Example tag: ${IMMICH_VERSION:-release}-cuda image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release} # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration # file: hwaccel.ml.yml # service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable volumes: - model-cache:/cache env_file: - .env restart: always redis: container_name: immich_redis image: docker.io/redis:6.2-alpine@sha256:328fe6a5822256d065debb36617a8169dbfbd77b797c525288e465f56c1d392b healthcheck: test: redis-cli ping || exit 1 restart: always database: container_name: immich_postgres image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0 environment: POSTGRES_PASSWORD: ${DB_PASSWORD} POSTGRES_USER: ${DB_USERNAME} POSTGRES_DB: ${DB_DATABASE_NAME} POSTGRES_INITDB_ARGS: \u0026#39;--data-checksums\u0026#39; volumes: - ${DB_DATA_LOCATION}:/var/lib/postgresql/data healthcheck: test: pg_isready --dbname=\u0026#39;${DB_DATABASE_NAME}\u0026#39; --username=\u0026#39;${DB_USERNAME}\u0026#39; || exit 1; Chksum=\u0026#34;$$(psql --dbname=\u0026#39;${DB_DATABASE_NAME}\u0026#39; --username=\u0026#39;${DB_USERNAME}\u0026#39; --tuples-only --no-align --command=\u0026#39;SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database\u0026#39;)\u0026#34;; echo \u0026#34;checksum failure count is $$Chksum\u0026#34;; [ \u0026#34;$$Chksum\u0026#34; = \u0026#39;0\u0026#39; ] || exit 1 interval: 5m start_interval: 30s start_period: 5m command: [\u0026#34;postgres\u0026#34;, \u0026#34;-c\u0026#34; ,\u0026#34;shared_preload_libraries=vectors.so\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#39;search_path=\u0026#34;$$user\u0026#34;, public, vectors\u0026#39;, \u0026#34;-c\u0026#34;, \u0026#34;logging_collector=on\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;max_wal_size=2GB\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;shared_buffers=512MB\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;wal_compression=on\u0026#34;] restart: always volumes: model-cache:\r.env: 改掛載路徑就可用 # You can find documentation for all the supported env variables at https://immich.app/docs/install/environment-variables # The location where your uploaded files are stored UPLOAD_LOCATION=/home/user/photo/immich/upload # The location where your database files are stored DB_DATA_LOCATION=./postgres # The Immich version to use. You can pin this to a specific version like \u0026#34;v1.71.0\u0026#34; IMMICH_VERSION=release # Connection secret for postgres. You should change it to a random password DB_PASSWORD=postgres # The values below this line do not need to be changed ################################################################################### DB_USERNAME=postgres DB_DATABASE_NAME=immich\rPhotoPrism 版本：240531-60b3a4628\n比起相簿他更像是畫廊，有各種圖片檢視方式，而 immich 是以時間軸為核心的瀏覽方式。最大的差別是免費版沒有帳號控制，一個 PhotoPrism 實例就是一個帳號。\ndocker-compose.yml: 改掛載路徑/帳號密碼就可用，那堆環境設定基本上用不到。\nservices: photoprism: ## Use photoprism/photoprism:preview for testing preview builds: image: photoprism/photoprism:latest ## Don\u0026#39;t enable automatic restarts until PhotoPrism has been properly configured and tested! ## If the service gets stuck in a restart loop, this points to a memory, filesystem, network, or database issue: ## https://docs.photoprism.app/getting-started/troubleshooting/#fatal-server-errors restart: always stop_grace_period: 10s depends_on: - mariadb security_opt: - seccomp:unconfined - apparmor:unconfined ## Server port mapping in the format \u0026#34;Host:Container\u0026#34;. To use a different port, change the host port on ## the left-hand side and keep the container port, e.g. \u0026#34;80:2342\u0026#34; (for HTTP) or \u0026#34;443:2342 (for HTTPS): ports: - \u0026#34;2342:2342\u0026#34; ## Before you start the service, please check the following config options (and change them as needed): ## https://docs.photoprism.app/getting-started/config-options/ environment: PHOTOPRISM_ADMIN_USER: \u0026#34;admin\u0026#34; # admin login username PHOTOPRISM_ADMIN_PASSWORD: \u0026#34;password\u0026#34; # initial admin password (8-72 characters) PHOTOPRISM_AUTH_MODE: \u0026#34;password\u0026#34; # authentication mode (public, password) PHOTOPRISM_SITE_URL: \u0026#34;http://localhost:2342/\u0026#34; # server URL in the format \u0026#34;http(s)://domain.name(:port)/(path)\u0026#34; PHOTOPRISM_DISABLE_TLS: \u0026#34;false\u0026#34; # disables HTTPS/TLS even if the site URL starts with https:// and a certificate is available PHOTOPRISM_DEFAULT_TLS: \u0026#34;true\u0026#34; # defaults to a self-signed HTTPS/TLS certificate if no other certificate is available PHOTOPRISM_ORIGINALS_LIMIT: 5000 # file size limit for originals in MB (increase for high-res video) PHOTOPRISM_HTTP_COMPRESSION: \u0026#34;gzip\u0026#34; # improves transfer speed and bandwidth utilization (none or gzip) PHOTOPRISM_LOG_LEVEL: \u0026#34;info\u0026#34; # log level: trace, debug, info, warning, error, fatal, or panic PHOTOPRISM_READONLY: \u0026#34;false\u0026#34; # do not modify originals directory (reduced functionality) PHOTOPRISM_EXPERIMENTAL: \u0026#34;false\u0026#34; # enables experimental features PHOTOPRISM_DISABLE_CHOWN: \u0026#34;false\u0026#34; # disables updating storage permissions via chmod and chown on startup PHOTOPRISM_DISABLE_WEBDAV: \u0026#34;false\u0026#34; # disables built-in WebDAV server PHOTOPRISM_DISABLE_SETTINGS: \u0026#34;false\u0026#34; # disables settings UI and API PHOTOPRISM_DISABLE_TENSORFLOW: \u0026#34;true\u0026#34; # disables all features depending on TensorFlow PHOTOPRISM_DISABLE_FACES: \u0026#34;true\u0026#34; # disables face detection and recognition (requires TensorFlow) PHOTOPRISM_DISABLE_CLASSIFICATION: \u0026#34;true\u0026#34; # disables image classification (requires TensorFlow) PHOTOPRISM_DISABLE_VECTORS: \u0026#34;false\u0026#34; # disables vector graphics support PHOTOPRISM_DISABLE_RAW: \u0026#34;false\u0026#34; # disables indexing and conversion of RAW images PHOTOPRISM_RAW_PRESETS: \u0026#34;false\u0026#34; # enables applying user presets when converting RAW images (reduces performance) PHOTOPRISM_SIDECAR_YAML: \u0026#34;true\u0026#34; # creates YAML sidecar files to back up picture metadata PHOTOPRISM_BACKUP_ALBUMS: \u0026#34;false\u0026#34; # creates YAML files to back up album metadata PHOTOPRISM_BACKUP_DATABASE: \u0026#34;false\u0026#34; # creates regular backups based on the configured schedule PHOTOPRISM_BACKUP_SCHEDULE: \u0026#34;daily\u0026#34; # backup SCHEDULE in cron format (e.g. \u0026#34;0 12 * * *\u0026#34; for daily at noon) or at a random time (daily, weekly) PHOTOPRISM_INDEX_SCHEDULE: \u0026#34;\u0026#34; # indexing SCHEDULE in cron format (e.g. \u0026#34;@every 3h\u0026#34; for every 3 hours; \u0026#34;\u0026#34; to disable) PHOTOPRISM_AUTO_INDEX: 300 # delay before automatically indexing files in SECONDS when uploading via WebDAV (-1 to disable) PHOTOPRISM_AUTO_IMPORT: -1 # delay before automatically importing files in SECONDS when uploading via WebDAV (-1 to disable) PHOTOPRISM_DETECT_NSFW: \u0026#34;false\u0026#34; # automatically flags photos as private that MAY be offensive (requires TensorFlow) PHOTOPRISM_UPLOAD_NSFW: \u0026#34;true\u0026#34; # allows uploads that MAY be offensive (no effect without TensorFlow) PHOTOPRISM_DATABASE_DRIVER: \u0026#34;sqlite\u0026#34; # SQLite is an embedded database that does not require a separate database server PHOTOPRISM_DATABASE_DRIVER: \u0026#34;mysql\u0026#34; # MariaDB 10.5.12+ (MySQL successor) offers significantly better performance compared to SQLite PHOTOPRISM_DATABASE_SERVER: \u0026#34;mariadb:3306\u0026#34; # MariaDB database server (hostname:port) PHOTOPRISM_DATABASE_NAME: \u0026#34;photoprism\u0026#34; # MariaDB database schema name PHOTOPRISM_DATABASE_USER: \u0026#34;photoprism\u0026#34; # MariaDB database user name PHOTOPRISM_DATABASE_PASSWORD: \u0026#34;insecure\u0026#34; # MariaDB database user password PHOTOPRISM_SITE_CAPTION: \u0026#34;這裡是你網頁標題名稱\u0026#34; PHOTOPRISM_SITE_DESCRIPTION: \u0026#34;\u0026#34; # meta site description PHOTOPRISM_SITE_AUTHOR: \u0026#34;\u0026#34; # meta site author ## Video Transcoding (https://docs.photoprism.app/getting-started/advanced/transcoding/): # PHOTOPRISM_FFMPEG_ENCODER: \u0026#34;software\u0026#34; # H.264/AVC encoder (software, intel, nvidia, apple, raspberry, or vaapi) # PHOTOPRISM_FFMPEG_SIZE: \u0026#34;1920\u0026#34; # video size limit in pixels (720-7680) (default: 3840) # PHOTOPRISM_FFMPEG_BITRATE: \u0026#34;32\u0026#34; # video bitrate limit in Mbit/s (default: 50) ## Run/install on first startup (options: update https gpu ffmpeg tensorflow davfs clitools clean): # PHOTOPRISM_INIT: \u0026#34;https gpu tensorflow\u0026#34; ## Run as a non-root user after initialization (supported: 0, 33, 50-99, 500-600, and 900-1200): # PHOTOPRISM_UID: 1000 # PHOTOPRISM_GID: 1000 # PHOTOPRISM_UMASK: 0000 ## Start as non-root user before initialization (supported: 0, 33, 50-99, 500-600, and 900-1200): # user: \u0026#34;1000:1000\u0026#34; ## Share hardware devices with FFmpeg and TensorFlow (optional): # devices: # - \u0026#34;/dev/dri:/dev/dri\u0026#34; # Intel QSV # - \u0026#34;/dev/nvidia0:/dev/nvidia0\u0026#34; # Nvidia CUDA # - \u0026#34;/dev/nvidiactl:/dev/nvidiactl\u0026#34; # - \u0026#34;/dev/nvidia-modeset:/dev/nvidia-modeset\u0026#34; # - \u0026#34;/dev/nvidia-nvswitchctl:/dev/nvidia-nvswitchctl\u0026#34; # - \u0026#34;/dev/nvidia-uvm:/dev/nvidia-uvm\u0026#34; # - \u0026#34;/dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools\u0026#34; # - \u0026#34;/dev/video11:/dev/video11\u0026#34; # Video4Linux Video Encode Device (h264_v4l2m2m) working_dir: \u0026#34;/photoprism\u0026#34; # do not change or remove ## Storage Folders: \u0026#34;~\u0026#34; is a shortcut for your home directory, \u0026#34;.\u0026#34; for the current directory volumes: # \u0026#34;/host/folder:/photoprism/folder\u0026#34; # Example - \u0026#34;/home/user/photo/photoprism/A:/photoprism/originals/A\u0026#34; # Original media files (DO NOT REMOVE) - \u0026#34;/home/user/photo/photoprism/B:/photoprism/originals/B\u0026#34; # 分別掛載三個（白名單） - \u0026#34;/home/user/photo/photoprism/C:/photoprism/originals/C\u0026#34; # - \u0026#34;/example/family:/photoprism/originals/family\u0026#34; # *Additional* media folders can be mounted like this # - \u0026#34;~/Import:/photoprism/import\u0026#34; # *Optional* base folder from which files can be imported to originals - \u0026#34;./storage:/photoprism/storage\u0026#34; # *Writable* storage folder for cache, database, and sidecar files (DO NOT REMOVE) ## MariaDB Database Server (recommended) ## see https://docs.photoprism.app/getting-started/faq/#should-i-use-sqlite-mariadb-or-mysql mariadb: image: mariadb:11 ## If MariaDB gets stuck in a restart loop, this points to a memory or filesystem issue: ## https://docs.photoprism.app/getting-started/troubleshooting/#fatal-server-errors restart: always stop_grace_period: 5s security_opt: # see https://github.com/MariaDB/mariadb-docker/issues/434#issuecomment-1136151239 - seccomp:unconfined - apparmor:unconfined command: --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120 ## Never store database files on an unreliable device such as a USB flash drive, an SD card, or a shared network folder: volumes: - \u0026#34;./database:/var/lib/mysql\u0026#34; # DO NOT REMOVE environment: MARIADB_AUTO_UPGRADE: \u0026#34;1\u0026#34; MARIADB_INITDB_SKIP_TZINFO: \u0026#34;1\u0026#34; MARIADB_DATABASE: \u0026#34;photoprism\u0026#34; MARIADB_USER: \u0026#34;photoprism\u0026#34; MARIADB_PASSWORD: \u0026#34;insecure\u0026#34; MARIADB_ROOT_PASSWORD: \u0026#34;insecure\u0026#34; ## Watchtower upgrades services automatically (optional) ## see https://docs.photoprism.app/getting-started/updates/#watchtower ## activate via \u0026#34;COMPOSE_PROFILES=update docker compose up -d\u0026#34; watchtower: restart: unless-stopped image: containrrr/watchtower profiles: [\u0026#34;update\u0026#34;] environment: WATCHTOWER_CLEANUP: \u0026#34;true\u0026#34; WATCHTOWER_POLL_INTERVAL: 7200 # checks for updates every two hours volumes: - \u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34; - \u0026#34;~/.docker/config.json:/config.json\u0026#34; # optional, for authentication if you have a Docker Hub account\rLibrePhoto 版本：不重要（2024/07）\n如果你很喜歡他的 UI 就用吧，問題有點多，對我來說最有用的功能是圖片排序選項有隨機。\n.env: 改掛載路徑/帳號密碼就可用，docker-compose「不能動」 # pw userName=admin userPass=admin # This file contains all the things you need to change to set up your Libre Photos. # There are a few items that must be set for it to work such as the location of your photos. # After the mandatory entries there are some optional ones that you may set. # Start of mandatory changes. # Location of your photos. scanDirectory=/home/user/photo # Internal data of LibrePhotos data=./librephotos/data # ------------------------------------------------------------------------------------------------ # Wow, we are at the optional now. Pretty easy so far. You do not have to change any of the below. # Set this value if you have a custom domain name. This allows uploads and django-admin access. If you do not have a custom domain name, leave this blank. csrfTrustedOrigins= #What port should Libre Photos be accessed at (Default 3000) httpPort=2497 # What branch should we install the latest weekly build or the development branch (dev) tag=latest # Number of workers, which take care of the request to the api. This setting can dramatically affect the ram usage. # A positive integer generally in the 2-4 x $(NUM_CORES) range. # You’ll want to vary this a bit to find the best for your particular workload. # Each worker needs 800MB of RAM. Change at your own will. Default is 2. gunniWorkers=4 # You can set the database name. Did you know Libre Photos was forked from OwnPhotos? dbName=librephotos # Here you can change the user name for the database. dbUser=docker # The password used by the database. dbPass=AaAa1234 # Default minimum rating to interpret as favorited. This default value is used when creating a new user. # Users can change this in their settings (Dashboards \u0026gt; Library). DEFAULT_FAVORITE_MIN_RATING=4 # Database host. Only change this if you want to use your own existing Postgres server. If using your own server, you can remove the \u0026#39;db\u0026#39; container from docker-compose.yml. If you\u0026#39;re changing the name of the DB\u0026#39;s container name (DB_CONT_NAME further down), you need to set this variable to match that name too. dbHost=db # Set the names of the docker containers to your own entries. Or don\u0026#39;t, I\u0026#39;m not your dad. # Changing these will require you to `make rename` to rename the services, and start the system with your chosen `docker-compose up -d` invocation again. # Note that changing the DB_CONT_NAME will also need you to set the `dbHost` variable to the same value. DB_CONT_NAME=db BACKEND_CONT_NAME=backend FRONTEND_CONT_NAME=frontend PROXY_CONT_NAME=proxy PGADMIN_CONT_NAME=pgadmin # --------------------------------------------------------------------------------------------- # If you are not a developer ignore the following parameters: you will never need them. # Where shall we store the backend and frontend code files. codedir=./librephotos/code # Location for pgAdmin pgAdminLocation=./librephotos/pgadmin\rPlex 版本：1.40.4.8679-424562606\n這個是網路上抄來的，不曉得為何很難找（跑得動的）。進去之後記得要把不安全網路打勾，因為一般來說內網連線沒有 https，不打勾連伺服器 (NAS) 都看不到\ndocker-compose.yml: 改掛載路徑/PLEX_CLAIM/ADVERTISE_IP就可用\nservices: plex: image: plexinc/pms-docker:latest # latest 安裝最新的版本 hostname: PlexServer # 自定義主機名稱 restart: always # 設置重啟策略 volumes: - \u0026#34;./config:/config\u0026#34; # Plex 配置文件目錄 #- \u0026#34;\u0026#39;數據目錄\u0026#39;/plex/transcode:/transcode\u0026#34; # Plex 轉碼文件目錄 - \u0026#34;./data:/data\u0026#34; # Plex 數據文件目錄 - \u0026#34;/home/user/vider:/video\u0026#34; ports: - 32400:32400/tcp # Plex 網頁訪問端口，例如要改為通過 8080 端口訪問，就修改為8080:32400 - 3005:3005/tcp # Plex Companion - 8324:8324/tcp # controlling Plex for Roku via Plex Companion - 32469:32469/tcp # access to the Plex DLNA Server - 32468:1900/udp # access to the Plex DLNA Server - 32410:32410/udp # current GDM network discovery - 32412:32412/udp # current GDM network discovery - 32413:32413/udp # current GDM network discovery - 32414:32414/udp # current GDM network discovery # devices: # Share hardware devices with FFmpeg (optional) # - \u0026#34;/dev/dri:/dev/dri\u0026#34; # Intel QSV # - \u0026#34;/dev/nvidia0:/dev/nvidia0\u0026#34; # Nvidia CUDA # - \u0026#34;/dev/nvidiactl:/dev/nvidiactl\u0026#34; # - \u0026#34;/dev/nvidia-modeset:/dev/nvidia-modeset\u0026#34; # - \u0026#34;/dev/nvidia-nvswitchctl:/dev/nvidia-nvswitchctl\u0026#34; # - \u0026#34;/dev/nvidia-uvm:/dev/nvidia-uvm\u0026#34; # - \u0026#34;/dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools\u0026#34; # - \u0026#34;/dev/video11:/dev/video11\u0026#34; # Raspberry V4L2 environment: TZ: Asia/Taipei # 容器內部時區 PLEX_UID: 0 # 在容器內創建的用戶 ID（不懂勿改） PLEX_GID: 0 # 在容器內創建的用戶組 ID（不懂勿改） PLEX_CLAIM: claim-hz2o-_1B6VxsQo8xzBfi # 真實伺服器的聲明令牌，您可以通過訪問 https://www.plex.tv/claim 獲取聲明令牌以將您的伺服器登錄到您的 Plex 帳戶 ADVERTISE_IP: 192.168.50.97:32400/ # 填寫外部訪問的固定 IP 或域名，沒有的話可以刪除此行\rStash 版本：0.26.2\ndocker-compose.yml: 改/data路徑就可用，其他元資料改不改都可以 # APPNICENAME=Stash # APPDESCRIPTION=An organizer for your porn, written in Go services: stash: image: stashapp/stash:latest container_name: stash restart: unless-stopped ## the container\u0026#39;s port must be the same with the STASH_PORT in the environment section ports: - \u0026#34;9999:9999\u0026#34; ## If you intend to use stash\u0026#39;s DLNA functionality uncomment the below network mode and comment out the above ports section # network_mode: host logging: driver: \u0026#34;json-file\u0026#34; options: max-file: \u0026#34;10\u0026#34; max-size: \u0026#34;2m\u0026#34; environment: - STASH_STASH=/data/ - STASH_GENERATED=/generated/ - STASH_METADATA=/metadata/ - STASH_CACHE=/cache/ ## Adjust below to change default port (9999) - STASH_PORT=9999 volumes: - /etc/localtime:/etc/localtime:ro ## Adjust below paths (the left part) to your liking. ## E.g. you can change ./config:/root/.stash to ./stash:/root/.stash ## Keep configs, scrapers, and plugins here. - /home/user/stash-app/config:/root/.stash ## Point this at your collection. - /home/user/video:/data ## This is where your stash\u0026#39;s metadata lives - /home/user/stash-app/metadata:/metadata ## Any other cache content. - /home/user/stash-app/cache:/cache ## Where to store binary blob data (scene covers, images) - /home/user/stash-app/blobs:/blobs ## Where to store generated content (screenshots,previews,transcodes,sprites) - /home/user/stash-app/generated:/generated\rLanraragi 版本：0.9.10\ndocker-compose.yml: 改掛載路徑就可用，注意修改密碼要重啟才會生效 services: lanraragi: image: difegue/lanraragi:latest container_name: lanraragi volumes: - /home/user/photo/lanraragi:/home/koyomi/lanraragi/content - /home/user/docker/lanraragi/database:/home/koyomi/lanraragi/database - /home/user/docker/lanraragi/thumb:/home/koyomi/lanraragi/thumb - /etc/localtime:/etc/localtime:ro ports: - 2279:3000 restart: always\rStirling PDF 版本：0.26.0\ndocker-compose.yml: 改掛載路徑就可用 services: stirling-pdf: image: frooodle/s-pdf:latest container_name: stirling-pdf ports: - \u0026#39;8080:8080\u0026#39; volumes: - /home/user/docker/stirlingpdf/tessdata:/usr/share/tessdata #Required for extra OCR languages - /home/uesr/docker/stirlingpdf/configs:/configs # - ./customFiles:/customFiles/ - ./logs:/logs/ environment: - DOCKER_ENABLE_SECURITY=false - INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false restart: always\r","date":"2024-07-28","id":1,"permalink":"/docs/nas/truenas-docker/","summary":"前言 弄完基礎的檔案分享設定之後就是玩 docker，本文列出幾個常見的 docker-compose.yml 以便一鍵部屬。\n還有個好消息，TrueNAS 在 2024/10 月版本將要放棄 k3s 改用 docker，這裡先放上幾個 docker-compose.yml，對相簿選擇障礙的可以看這裡。\nImmich 版本：v1.108.0\n這是最推薦的自架相簿，有些人可能會擔心他會破壞資料夾結構，尤其是攝影師，不過使用外部庫掛載就沒有這個問題。\n由於現在還在非常積極發展的階段，建議掛載後加上:ro唯獨以免誤刪。\ndocker-compose.yml: 改掛載路徑就可用 name: immich services: immich-server: container_name: immich_server image: ghcr.","tags":[],"title":"TrueNAS Docker"},{"content":"利用 Cloudflare Tunnel 和 DDNS 無需開放端口實現安全外網訪問 1. 思路 沒有思路，只是想找安全上外網的方式[1][2]，直接使用port fowarding等同裸奔，使用DDNS還是得port foward，ZeroTier/TailScale只能個人使用，用 VPN 路由器太舊，FRP內網穿透需要租VPS做中轉，刪去法後 Cloudflared Tunnel (CT) 是最安全且便宜的方式。\n這次使用註冊域名做 DDNS 解析不開 port 保證內網安全，其他需求使用 CNAME 經過 CT 加密傳輸，會有這種奇怪的方法其實是網路上只要用到 CT dashboard 的方法我都連不上[3][4]，可能還是得開 port，東拼西湊就變成這樣了。\n關於 DDNS，不要用 Cloudflare API，會用到自己想死。\n1.1. 優點 不用租 VPS 伺服器，最便宜域名 5 usd per year。 Cloudflared 的 reverse proxy 幫你擋DDoS，傳輸加密，隱藏主機 IP，免開本機 port。 如果域名在 Cloudflared 買還可以自動配好憑證，也不用每三個月自動更新。 每個 port 的服務使用個別配置的子域名進入。 1.2. 缺點 原始域名拿去更新 DDNS 無法使用，但可以使用 www 當 CNAME 有八成像。 若要使用原始域名可以在路由器開啟 port forwarding。 Note\n[已解決] 使用 tailscale 作內網穿透可存取包含 http / SMB / docker 等服務。\n[還沒試過] Cloudflare 只支援80/443 port，SMB等服務無法使用 proxy，只能直接開 port 2. 開始 這次服務需要用到DDNS以及Cloudflare Tunnel，所以教學也分為兩部分。本次教學需要更改的部分在指令中都會用\u0026lt;\u0026gt;框起，設定如下，請更改為自己的環境，：\nUSER_NAME=leo # DIR name in ubuntu-server TUNNEL_NAME=ubuntu-server DomainName=leo-photos.uk ServerLocalIP=192.168.50.100 PortPhotoprism=2342 PortImmich=2283\r1.1. 設定 DDNS I. 網域 購買網域：我是在 Cloudflare Domain Registration 購買的。注意之後需要 CNAME，因此域名盡量簡短，服務名稱可以在 CNAME 內完成。若是在其他網域商買的可以使用 change nameserver 功能，注意 no-ip 無法轉移。 新增 DNS：到 Cloudflare 主頁選擇 購買的網域 \u0026gt; 左側欄位的 DNS \u0026gt; DNS Records \u0026gt; Add record ，分別填入 Type A，leo-photos.uk，1.2.3.4 （1.2.3.4 可以隨便填，下一步動態更新 DNS 會自動修正）。 （選用）啟用 proxy 會讓該 IP 經過 Cloudflare 伺服器以隱藏原始 IP。 II. 取得 Cloudflare API Token 到 Cloudflare 主頁點擊 右上角頭像 \u0026gt; My Profile \u0026gt; API Tokens \u0026gt; Create Token。 選擇 Edit zone DNS ，Zone Resources選擇你的域名，點擊下一步進入Summary，再點擊下一步。 生成的Token很長等一下會用到，下面指令可以測試Token是否可用，運作正常會顯示 This API Token is valid and active 。 III. 設定 DDNS 服務 使用 DDNS-GO 自動獲取 IP （圖文教學）\n部署 DDNS-GO： docker run -d --name ddns-go --restart=always -p 9876:9876 -v /opt/ddns-go:/root jeessy/ddns-go\r進入 http://\u0026lt;192.168.50.100\u0026gt;:9876，選擇Cloudflare，貼上剛剛的Token，Domains填申請的域名，設定帳號密碼後儲存。 1.2. 設定 Cloudflare Tunnel 依照官方教學輸入指令，注意到第四步我們會先跑去設定 run as service ，以下為完整步驟。以Linux為例：\nI. 安裝 Cloudflared 新增 GPG key、新增 Cloudflare apt repo、更新並安裝 sudo mkdir -p --mode=0755 /usr/share/keyrings curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg \u0026gt;/dev/null echo \u0026#34;deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared $(lsb_release -cs) main\u0026#34; | sudo tee /etc/apt/sources.list.d/cloudflared.list sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install cloudflared\rII. 設定 Tunnel 登入 Cloudflared，進入顯示的網址登入，此步驟 Cloudflare 會自動新增給 Tunnel 用的 API Token：\ncloudflared tunnel login\r建立 Tunnel：\ncloudflared tunnel create \u0026lt;ubuntu-server\u0026gt;\r列出 Tunnel UUID：\ncloudflared tunnel list\r建立 config 檔案 在 /home/leo 中使用 nano 建立一個 config.yml 檔案，以下方式二擇一，若只有一個port可用以下形式：\nurl: http://\u0026lt;localhost:2283\u0026gt; tunnel: \u0026lt;Tunnel-UUID\u0026gt; credentials-file: /home/leo/.cloudflared/\u0026lt;Tunnel-UUID\u0026gt;.json\r多 port 可以用以下格式，可指定 port 對應不同 CNAME：\ntunnel: \u0026lt;Tunnel-UUID\u0026gt; credentials-file: /home/leo/.cloudflared/\u0026lt;Tunnel-UUID\u0026gt;.json ingress: - hostname: \u0026lt;immich.leo-photos.uk\u0026gt; service: http://\u0026lt;localhost:2283\u0026gt; - hostname: \u0026lt;photoprism.leo-photos.uk\u0026gt; service: http://\u0026lt;localhost:2342\u0026gt; - service: http_status:404\r/etc/cloudflared中也要一份一模一樣的檔案，可使用cp指令直接複製一份到目標資料夾：\nsudo cp ~/.cloudflared/config.yml /etc/cloudflared/config.yml\r設定 run as service 在背景中運行 Tunnel\nsudo cloudflared service install sudo systemctl start cloudflared sudo systemctl status cloudflared sudo systemctl restart cloudflared\r註冊 route dns 有幾個 CNAME 就要註冊幾個 route dns。route dns只能到官網刪除，本地無法刪除\n# \u0026lt;Tunnel-Name\u0026gt; / \u0026lt;hostname\u0026gt; cloudflared tunnel route dns \u0026lt;ubuntu-server\u0026gt; \u0026lt;immich.leo-photos.uk\u0026gt;\r大功告成\n啟動 Tunnel\n# cloudflared tunnel run \u0026lt;ubuntu-server\u0026gt; sudo systemctl restart cloudflared\r3. 額外的選項 Cloudflare 免費版也送了很多安全選項 點選購買的網域：\nQuick Start Guide勾一勾 DNS \u0026gt; DNS Settings \u0026gt; DNSSEC SSL/TLS \u0026gt; Overview \u0026gt; encryption Full (strict) SSL/TLS \u0026gt; Edge Certificates Security: WAF templete: mTLS-enforced authentication Security: WAF Zone lockdown Country not equal Taiwan Security: Bots 但是聽說有問題 Security: DDoS \u0026gt; Block, High Security: Security Level, Browser Integrity Check Speed: Optimization HTTP/2 to Origin off, HTTP/3 (with QUIC) Rules: 上次動了直接連不了 Network: WebSockets off, gRPC off, Onion Routing off Zero Trust \u0026gt; Settings \u0026gt; Network \u0026gt; Proxy 4. Notes 網路上使用dashboard的方法我都無法成功，所以才用CLI方式建立。\n網路上很多\u0026quot;都變成“，複製貼上時請小心。\nA record=ipv4, AAAA record=ipv6。\n查詢後發現使用no-ip無法轉移nameserver到Cloudflare上。\n可使用以下指令管理Cloudflared\nsudo systemctl status cloudflared sudo systemctl start cloudflared sudo systemctl restart cloudflared sudo systemctl enable cloudflared\r移除Cloudflared\n# 依序移除service, auto start, config, cloudflared sudo cloudflared service uninstall sudo rm /etc/systemd/system/cloudflared.service sudo rm /etc/cloudflared/config.yml sudo rm -r ~/.cloudflared sudo apt-get remove cloudflared\rUseful commands\ncloudflared tunnel delete \u0026lt;Tunnel-UUID or NAME\u0026gt;\r","date":"2024-05-08","id":2,"permalink":"/docs/nas/cloudflare-tunnel-ddns-guide/","summary":"紀錄把一台破電腦裝成 NAS 的過程","tags":[],"title":"Cloudflare Tunnel"},{"content":"\nDoks 1.6 is out! This release includes a new Hugo requirement, an improved scripts setup, new development tools, and more.\nTo upgrade an existing project, see the Upgrade Doks guide.\nHighlights New Hugo requirement Improved scripts setup New development tools New Hugo requirement Doks 1.6 now requires you to have the latest Hugo extended version installed globally on your system. See Hugo\u0026rsquo;s documentation for installation instructions.\nImproved scripts setup Doks 1.6 introduces a cleaner scripts section in your projects\u0026rsquo; package.json:\n{ \u0026#34;name\u0026#34;: \u0026#34;doks\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Doks theme\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;Hyas\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;MIT\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;create\u0026#34;: \u0026#34;hugo new\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;hugo server --disableFastRender --noHTTPCache\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;prettier **/** -w -c\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;hugo --minify --gc\u0026#34;, \u0026#34;preview\u0026#34;: \u0026#34;vite preview --outDir public\u0026#34; }, \u0026#34;dependencies\u0026#34;: { \u0026#34;@hyas/doks-core\u0026#34;: \u0026#34;^1.6.1\u0026#34;, \u0026#34;@hyas/images\u0026#34;: \u0026#34;^3.2.0\u0026#34;, \u0026#34;@hyas/inline-svg\u0026#34;: \u0026#34;^1.1.0\u0026#34;, \u0026#34;@hyas/seo\u0026#34;: \u0026#34;^2.3.0\u0026#34;, \u0026#34;@tabler/icons\u0026#34;: \u0026#34;^3.2.0\u0026#34;, \u0026#34;gethyas\u0026#34;: \u0026#34;^2.4.2\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;prettier\u0026#34;: \u0026#34;^3.2.5\u0026#34;, \u0026#34;vite\u0026#34;: \u0026#34;^5.2.10\u0026#34; }, \u0026#34;engines\u0026#34;: { \u0026#34;node\u0026#34;: \u0026#34;\u0026gt;=20.11.0\u0026#34; } }\rNew development tools Hyas/Doks now uses Prettier as a code formatter and Vite to preview your project\u0026rsquo;s build. You can configure Prettier in the .prettierrc.yaml and .prettierignore files in the root of your project. With Vite, when you use the --host flag, you can preview the build on your local network — for example on your mobile phone — here\u0026rsquo;s how:\nnpm\rpnpm\rYarn\rnpm run build -- --baseURL=/ \u0026amp;\u0026amp; npm run preview -- --host\rpnpm build --baseURL=/ \u0026amp;\u0026amp; pnpm preview --host\ryarn run build --baseURL=/ \u0026amp;\u0026amp; yarn run preview --host\rBug Fixes Doks 1.6 also includes several bug fixes. Check out the release notes to learn more.\n","date":"2024-05-16","id":3,"permalink":"/blog/doks-1-6/","summary":"Doks 1.6 is out! This release includes a new Hugo requirement, an improved \u003ccode\u003escripts\u003c/code\u003e setup, new development tools, and more.","tags":[],"title":"Doks 1.6"},{"content":"Doks 1.4 is now available! This release includes a new shortcode for link cards, improved sidebar navigation, and more.\nTo upgrade an existing project, see the Upgrade Doks guide.\nHighlights Link cards shortcode Improved sidebar navigation Link cards shortcode You can now use the {{\u0026lt; link-card \u0026gt;}} shortcode to link prominently to different pages.\nA {{\u0026lt; link-card \u0026gt;}} requires a title and an href attribute. You can optionally include a short description or other link attributes such as target.\nShowcase\rExplore the infinite possibilities of Doks\n{{\u0026lt; link-card title=\u0026#34;Showcase\u0026#34; description=\u0026#34;Explore the infinite possibilities of Doks\u0026#34; href=\u0026#34;/showcase/\u0026#34; target=\u0026#34;_blank\u0026#34; \u0026gt;}}\rRead more about link cards in our documentation.\nImproved sidebar navigation By default, Doks will automatically generate a sidebar based on the filesystem structure of your documentation, using each file\u0026rsquo;s title property as the sidebar entry.\nFor example, given the following file structure:\n. └──content/ └───docs/ ├───guides/ │ ├───_index.md │ └───example.md reference/ │ ├───_index.md │ └───example.md └───_index.md\rThe following sidebar will be automatically generated:\nSections can be collapsed by default by setting the collapsed property to true in the frontmatter of a section’s _index.md.\nSidebar navigation is also available for other docs based sections you create. Read more about sidebar navigation in our documentation.\nBug Fixes As always, additional bug fixes are included in this release. Check out the release notes to learn more.\n","date":"2024-03-02","id":4,"permalink":"/blog/doks-1-4/","summary":"Doks 1.4 is now available! This release includes a new shortcode for link cards, improved sidebar navigation, and more.","tags":[],"title":"Doks 1.4"},{"content":"Doks 1.3 — our first release of the new year — is here! This release includes restructured dependencies, deduplicated Bootstrap variables, and more.\nTo upgrade an existing project, see the Upgrade Doks guide.\nHighlights Restructured dependencies Deduplicated Bootstrap variables Restructured dependencies Doks main dependencies are now specified in Doks\u0026rsquo; package.json — in stead of in @hyas/doks-core\u0026rsquo;s package.json — so you can easily update for example Hugo, Hyas Images, and Hyas SEO yourself.\n{ \u0026#34;scripts\u0026#34;: { \u0026#34;postinstall\u0026#34;: \u0026#34;hugo-installer --version otherDependencies.hugo --extended --destination node_modules/.bin/hugo\u0026#34; }, \u0026#34;dependencies\u0026#34;: { \u0026#34;@hyas/doks-core\u0026#34;: \u0026#34;^1.3.0\u0026#34;, \u0026#34;@hyas/images\u0026#34;: \u0026#34;^2.0.3\u0026#34;, \u0026#34;@hyas/inline-svg\u0026#34;: \u0026#34;^1.0.5\u0026#34;, \u0026#34;@hyas/seo\u0026#34;: \u0026#34;^2.1.0\u0026#34;, \u0026#34;@tabler/icons\u0026#34;: \u0026#34;^2.40.0\u0026#34;, \u0026#34;exec-bin\u0026#34;: \u0026#34;^1.0.0\u0026#34;, \u0026#34;gethyas\u0026#34;: \u0026#34;^2.2.2\u0026#34;, \u0026#34;hugo-installer\u0026#34;: \u0026#34;^4.0.1\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;shx\u0026#34;: \u0026#34;^0.3.4\u0026#34; }, \u0026#34;otherDependencies\u0026#34;: { \u0026#34;hugo\u0026#34;: \u0026#34;0.121.1\u0026#34; } }\rHyas Images for example is updated like any @hyas/* integration (or theme):\nnpm\rpnpm\rYarn\rnpm install @hyas/images@latest\rpnpm upgrade @hyas/images --latest\ryarn upgrade @hyas/images --latest\rDeduplicated Bootstrap variables Doks now only specifies customized Bootstrap SCSS variables in _variables-overrides.scss — instead of overriding all Bootstrap SCSS variables — making customizations easier and more robust.\nAdd your customizations in assets/scss/common/:\n_variables-custom.scss\r/* Put your custom SCSS variables here */\r_custom.scss\r/* Put your custom SCSS code here */\rBug Fixes Additional bug fixes are included in this release. Check out the release notes to learn more.\n","date":"2024-01-17","id":5,"permalink":"/blog/doks-1-3/","summary":"Doks 1.3 — our first release of the new year — is here! This release includes restructured dependencies, deduplicated Bootstrap variables, and more.","tags":[],"title":"Doks 1.3"},{"content":"Doks 1.2 is out! This release features support for diagrams, extended code blocks formatting, and more.\nTo upgrade an existing project, see the Upgrade Doks guide.\nHighlights Diagrams Support Code blocks formatting Diagrams Support Diagrams are now available in 1.2. You can use a fenced code block to embed an SVG image of a diagram in your Doks site using the free Kroki service.\nKroki generates diagrams from textual descriptions, and provides a unified API with support for D2, Mermaid, PlantUML, and other diagram types\n```kroki {type=mermaid} gantt title A Gantt Diagram dateFormat YYYY-MM-DD section Section A task :a1, 2023-12-01, 30d Another task :after a1, 20d section Another Task in Another :2023-12-12, 12d another task :24d ```\rRead more about diagrams in our documentation.\nCode blocks formatting Doks now extends the formatting possibilities for code blocks. Code blocks can be rendered inside a window-like frame. A frame that looks like a terminal window will be used for shell scripting languages (e.g. bash or sh). Other languages display inside a code editor-style frame if they include a title.\nA code block\u0026rsquo;s optional title can be set with a title=\u0026quot;...\u0026quot; attribute following the code block’s opening backticks and language identifier.\nnpm install @hyas/doks-core@latest\r```bash npm install @hyas/doks-core@latest ```\rcount.js\rif ([1, \u0026#34;one\u0026#34;, 2, \u0026#34;two\u0026#34;].includes(value)) { console.log(\u0026#34;Number is either 1 or 2.\u0026#34;); // comment }\r```js {title=\u0026#34;count.js\u0026#34;} if ([1, \u0026#34;one\u0026#34;, 2, \u0026#34;two\u0026#34;].includes(value)) { console.log(\u0026#34;Number is either 1 or 2.\u0026#34;); // comment } ```\rAlso, you now can add line numbers and line highlighting. Read more about code blocks in our documentation.\nBug Fixes Additional bug fixes are included in this release. Check out the release notes to learn more.\n","date":"2023-12-23","id":6,"permalink":"/blog/doks-1-2/","summary":"Doks 1.2 is out! This release features support for diagrams, extended code blocks formatting, and more.","tags":[],"title":"Doks 1.2"},{"content":"Doks 1.0 is here! This release is a restructure release, making Doks more robust, reliable, and flexible.\nTo upgrade an existing project, see the Upgrade to v1 guide.\nQuick start Get a new Doks project up and running locally with our helpful create-hyas CLI wizard!\nnpm\rpnpm\rYarn\rnpm create hyas@latest -- --template doks\rpnpm create hyas@latest -- --template doks\ryarn create hyas@latest -- --template doks\rOur Installation Guide has step-by-step instructions for installing Doks using our CLI wizard.\nQuick links Try Doks in your browser: open the template on Gitpod. Explore the infinite possibilities of Doks in our Showcase. Get support, get involved, and join our community of Doks developers — it all happens on Discussions. Bug Fixes Additional bug fixes are included in this release. Check out the release notes to learn more.\n","date":"2023-09-12","id":7,"permalink":"/blog/doks-1/","summary":"Doks 1.0 is here! This release is a restructure release, making Doks more robust, reliable, and flexible.","tags":[],"title":"Doks 1.0"},{"content":"","date":"2023-09-07","id":8,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"Blowfish 是高度客製化的主題，一進去 config 也是多到眼花撩亂，這邊稍微紀錄一下本站的設定。\n0. 安裝 如果要安裝舊版會發現用 homebrew 會想罵髒話，這裡放上安裝指定版本的方法，其中 @latest 改成 @v0.129.0。\n1. 基本知識 Hugo 對於渲染設定都放在 assets 以及 layouts 資料夾中，如果主資料夾有檔案就會使用主資料夾的檔案進行渲染，反之用 theme 資料夾的對應檔案夾進行渲染。\nPublic 是完整的網站，不用動他，但是要部屬網站時可以清掉 .git 以外的檔案清除調試時生成的檔案。\nStatic 中的檔案會原封不動放到 public 中，而 assets 中的檔案會被 Hugo 處理。以 blowfish 而言，static 放 robots.txt 等設定文件，圖片/custom.css/js 都放在 assets。\n2. 設定 permalink 從一開始就做好檔案管理，詳情請見 調整Hugo的permalinks，讓不同目錄下的頁面產生同一個網址\n3. 修改預設 frontmatter 把 archetypes/default.md 改成\n--- title: \u0026#39;{{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#39; date: {{ .Date }} draft: true summary: tags: [] categories: [] series: [] series_order: progress_bar: true ---\r4. 設定網頁不被 Google 搜尋 noindex 為不被搜尋索引，nofollow 為不被索引頁面連結，來源。\n在 front matter 中加入 robots: \u0026quot;noindex, nofollow\u0026quot;。\n5. 修改內容預覽 接下來兩篇的修改內容包含：\n問題修復\n標籤與分類分別顯示 文章封面 改善對比度 網站 logo 網頁標籤名稱 註腳（文章引用） 美化選集功能 關閉相關文章簡介 文章資訊間隔符號 模糊設定 進階客製化\n超連結 文章存檔頁面 閱讀進度 簡碼 - hint 簡碼 - expand 自動加上編輯時間 ","date":"2024-07-01","id":9,"permalink":"/docs/nas/blowfish/settings/","summary":"Blowfish 是高度客製化的主題，一進去 config 也是多到眼花撩亂，這邊稍微紀錄一下本站的設定。\n0. 安裝 如果要安裝舊版會發現用 homebrew 會想罵髒話，這裡放上安裝指定版本的方法，其中 @latest 改成 @v0.129.0。\n1. 基本知識 Hugo 對於渲染設定都放在 assets 以及 layouts 資料夾中，如果主資料夾有檔案就會使用主資料夾的檔案進行渲染，反之用 theme 資料夾的對應檔案夾進行渲染。","tags":[],"title":"基礎設定"},{"content":"","date":"2023-12-12","id":10,"permalink":"/docs/notes/programming/","summary":"","tags":[],"title":"Programming"},{"content":"此客製化基於 hugo blowfish theme 完成。\n大部分的程式都由 GPT 完成，偉哉 GPT。\n1. 超連結 游標移動到連結時變色+底線。範例\n在assets/css/custom.css新增以下：\n.article-content a { color: rgb(65, 105, 225); /* 使用淡藍色 */ } /* 懸停時底線改為粗線並增加距離 */ .article-content a:hover, .article-content a:focus { color: rgb(0, 0, 139); /* 設定連結懸停和聚焦狀態下的顏色 */ text-decoration: underline; /* 添加連結懸停時的底線 */ text-decoration-thickness: 2px; /* 設定底線的粗線 */ text-decoration-skip-ink: none; /* 避免底線與文字重疊 */ text-underline-offset: 4.5px; /* 增加底線與文字的距離*/ }\r無聊叫 GPT 生的版本\r.article-content a { color: rgb(var(--color-primary-600)); text-decoration: none; background-image: linear-gradient(90deg, rgba(var(--color-primary-700), 0) 0%, rgba(var(--color-primary-700), 0) 50%, rgba(var(--color-primary-700), 1) 50%, rgba(var(--color-primary-700), 1) 100% ); background-size: 200% 2px; background-position: 100% 100%; background-repeat: no-repeat; transition: color 0.3s ease, background-position 0.5s ease-out; } .article-content a:hover, .article-content a:focus { color: rgb(var(--color-primary-700)); background-position: 0% 100%; animation: glitch 0.3s cubic-bezier(.25, .46, .45, .94) both infinite; } @keyframes glitch { 0% { transform: translate(0); } 20% { transform: translate(-2px, 2px); } 40% { transform: translate(-2px, -2px); } 60% { transform: translate(2px, 2px); } 80% { transform: translate(2px, -2px); } 100% { transform: translate(0); } }\r2. 文章存檔頁面 列出所有文章，無論是哪一種分類，範例。\n在 layouts/_default/archive.html 新增以下：\n新版\r{{ define \u0026#34;main\u0026#34; }} \u0026lt;script\u0026gt; document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { const postItems = document.querySelectorAll(\u0026#39;.post-item\u0026#39;); postItems.forEach(item =\u0026gt; { item.addEventListener(\u0026#39;mouseenter\u0026#39;, function() { this.classList.add(\u0026#39;post-item-hover\u0026#39;); }); item.addEventListener(\u0026#39;mouseleave\u0026#39;, function() { this.classList.remove(\u0026#39;post-item-hover\u0026#39;); }); }); // 為每個月份標題設置隨機漸變背景 const monthTitles = document.querySelectorAll(\u0026#39;.month-title\u0026#39;); monthTitles.forEach(title =\u0026gt; { const [color1, color2, color3] = generateContrastingColors(false); const [color4, color5, color6] = generateContrastingColors(true); const angle1 = generateRandomAngle(); const angle2 = generateRandomAngle(); // 為每個月份標題設置兩組不同的漸變效果 title.style.setProperty(\u0026#39;--gradient-1\u0026#39;, `linear-gradient(${angle1}deg, ${color1}, ${color2})`); title.style.setProperty(\u0026#39;--gradient-2\u0026#39;, `linear-gradient(${angle2}deg, ${color4}, ${color5})`); }); }); function generateContrastingColors(isDarkMode) { // 隨機選擇一個基礎色相 const baseColor = Math.random() * 360; // 在基礎色相的基礎上較大幅度偏移，以產生更顯著不同的顏色 const c1 = baseColor; const c2 = (baseColor + 180 + Math.random() * 60 - 15) % 360; // 使第二個顏色與第一個顏色有較大的差異 const c3 = (baseColor + 90 + Math.random() * 60 - 15) % 360; // 增加第三個顏色的偏移 const c4 = (baseColor + 270 + Math.random() * 60 - 15) % 360; // 增加第四個顏色的偏移 // 將顏色的亮度和飽和度調整為暗色系或亮色系 const adjustColor = (color, isDarkMode) =\u0026gt; { const lightness = isDarkMode ? 40 : 75; // 暗色模式較暗，亮色模式較亮 const saturation = 100; // 暗色模式和亮色模式的飽和度 return `hsl(${color}, ${saturation}%, ${lightness}%)`; }; // 生成暗色系或亮色系的顏色 const color1 = adjustColor(c1, isDarkMode); const color2 = adjustColor(c2, isDarkMode); const color3 = adjustColor(c3, isDarkMode); // 返回顏色字符串 return [color1, color2, color3]; } function generateRandomAngle() { const step = 15; // 每個選項的角度步長 const minAngle = 30; // 最小角度 const maxAngle = 150; // 最大角度 const totalSteps = (maxAngle - minAngle) / step + 1; // 計算在此範圍內總共多少個步驟 const randomStep = Math.floor(Math.random() * totalSteps); // 隨機選擇一個步驟 const randomAngle = minAngle + randomStep * step; // 計算隨機角度 return randomAngle; } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /* 默認樣式 */ /* 全部寬度 */ .timeline { max-width: 850px; margin: 0 auto; padding: 20px; } /* 年份 */ .year-container { margin-bottom: 40px ; border: 1px solid #e0e0e0; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 60px rgba(0, 0, 0, 0.4); background-color: rgba(var(--color-neutral-300), 0.5); } /* 年份文字與背景 */ .year { background-color: #d9d4d4 !important; padding: 10px 20px; font-size: 24px; font-weight: bold; display: flex; justify-content: space-between; align-items: center; } /* 年文章數 */ .post-count { background-color: #007bff; color: white; padding: 2px 8px; border-radius: 12px; font-size: 14px; } /* 月份 */ .month-container { margin-bottom: 30px; } .month-title { font-size: 1.2rem; font-weight: 700; background: var(--gradient-1); padding: 0.6rem 1rem; border-radius: 40px; border: transparent; text-transform: uppercase; /* 使用 Flexbox 來居中文本 */ display: inline-flex; align-items: center; justify-content: center; /* 設定行高，使文字垂直居中 */ line-height: 1; } .dark .month-title { background: var(--gradient-2); } /* 該月文章 */ .post-list { list-style-type: none; padding: 2px; } /* 個別文章背景 */ .post-item { transition: transform 0.3s, z-index 0.3s, box-shadow 0.3s, background-color 0.3s; background: rgba(var(--color-neutral-100), 0.95); } /* 個別文章懸浮 */ .post-item-hover { transform: scale(1.01); background: rgba(var(--color-neutral-100), 0.95) !important; } .post-item-inner { display: flex; align-items: flex-start; background-color: transparent; } /* 文章日期文字 */ .post-date { font-size: 14px; color: rgb(var(--color-neutral-500)); margin-right: 11px; margin-left: 4px; white-space: nowrap; /* 防止日期文字換行 */ } /* 文章標題文字 */ .post-title { font-size: 20px; color: rgb(var(--color-neutral-800)) !important; text-decoration: none; font-weight: bold; } /* 深色模式樣式 */ .dark .year { background-color: rgba(var(--color-neutral-900), 0.95) !important; color: rgb(var(--color-neutral-100)); } .dark .year-container { border: 1px solid rgb(var(--color-neutral-900)); background-color: rgba(var(--color-neutral-800), 0.3); } .dark .month-title { color: rgb(var(--color-neutral-100)); } .dark .post-item { background-color: rgba(var(--color-neutral-800), 0.4); } .dark .post-item-hover { background-color: rgba(var(--color-neutral-800),0.8) !important; } .dark .post-date { color: rgb(var(--color-neutral-100)); } .dark .post-title { color: rgb(var(--color-neutral-100)) !important; } \u0026lt;/style\u0026gt; {{ if .Params.showHero | default (.Site.Params.article.showHero | default false) }} {{ $heroStyle := .Params.heroStyle }} {{ if not $heroStyle }}{{ $heroStyle = .Site.Params.article.heroStyle }}{{ end }} {{ $heroStyle := print \u0026#34;partials/hero/\u0026#34; $heroStyle \u0026#34;.html\u0026#34; }} {{ if templates.Exists $heroStyle }} {{ partial $heroStyle . }} {{ else }} {{ partial \u0026#34;partials/hero/basic.html\u0026#34; . }} {{ end }} {{ end }} {{ $currentLang := $.Site.Language.Lang }} {{ $months := index $.Site.Data.months $currentLang }} \u0026lt;article class=\u0026#34;timeline\u0026#34;\u0026gt; \u0026lt;header id=\u0026#34;single_header\u0026#34; class=\u0026#34;mt-5 max-w-prose\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;mt-0 text-4xl font-extrabold text-neutral-900 dark:text-neutral\u0026#34;\u0026gt; {{ .Title | emojify }} \u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;article-content max-w-prose mb-20\u0026#34;\u0026gt; \u0026lt;br\u0026gt; {{ .Content }} \u0026lt;/div\u0026gt; \u0026lt;section class=\u0026#34;all-posts mt-8 text-neutral\u0026#34;\u0026gt; {{ range .Site.RegularPages.GroupByDate \u0026#34;2006\u0026#34; }} \u0026lt;div class=\u0026#34;year-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;year\u0026#34;\u0026gt; {{ .Key }} \u0026lt;span class=\u0026#34;post-count\u0026#34;\u0026gt;{{ len .Pages }}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; {{ range .Pages.GroupByDate \u0026#34;January\u0026#34; }} \u0026lt;div class=\u0026#34;month-container\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;month-title\u0026#34;\u0026gt; {{ index $months .Key }} \u0026lt;/span\u0026gt; \u0026lt;ul class=\u0026#34;post-list\u0026#34;\u0026gt; {{ range where .Pages \u0026#34;Params.exclude\u0026#34; \u0026#34;ne\u0026#34; true }} \u0026lt;li class=\u0026#34;post-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;post-item-inner\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;post-date\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;1月2日\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;div class=\u0026#34;post-details\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34; class=\u0026#34;post-title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;basicHtml-div\u0026#34;\u0026gt; {{ with .Params.categories }} \u0026lt;div class=\u0026#34;flex flex-wrap items-center mr-4 mb-2\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;text-sm text-neutral-500 dark:text-neutral-400\u0026#34; style=\u0026#34;font-size: 1rem; position: relative; top: -0.10em; left: -0.0em; margin-right: .5rem;\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; \u0026#34;list\u0026#34; }} \u0026lt;/span\u0026gt; {{ range . }} \u0026lt;span class=\u0026#34;mr-1 mb-1\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ printf \u0026#34;/categories/%s\u0026#34; (urlize . | lower) }}\u0026#34; class=\u0026#34;inline-block relative\u0026#34;\u0026gt; {{ partial \u0026#34;badge.html\u0026#34; . }} \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;basicHtml-div\u0026#34;\u0026gt; {{ with .Params.tags }} \u0026lt;div class=\u0026#34;flex flex-wrap items-center mr-4 mb-2\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;text-sm text-neutral-500 dark:text-neutral-400\u0026#34; style=\u0026#34;font-size: 1rem; position: relative; top: -0.1em; left: -0.0em; margin-right: .5rem;\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; \u0026#34;tag\u0026#34; }} \u0026lt;/span\u0026gt; {{ range . }} \u0026lt;span class=\u0026#34;mr-1 mb-1\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ printf \u0026#34;/tags/%s\u0026#34; (urlize . | lower) }}\u0026#34; class=\u0026#34;inline-block relative\u0026#34;\u0026gt; {{ partial \u0026#34;badge.html\u0026#34; . }} \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/section\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;!-- \u0026lt;script src=\u0026#34;{{ \u0026#34;js/archives.js\u0026#34; | relURL }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; {{ end }}\r舊版\r{{ define \u0026#34;main\u0026#34; }} {{ .Scratch.Set \u0026#34;scope\u0026#34; \u0026#34;single\u0026#34; }} \u0026lt;style\u0026gt; body { font-family: Arial, sans-serif; background-color: #f5f5f5; color: #333; } .timeline { max-width: 800px; margin: 0 auto; } .container { padding: 10px 0; background-color: inherit; width: 100%; margin-bottom: 20px; } .date { padding: 15px; color: #000000; font-weight: bold; font-size: 1.8em; text-align: left; border-radius: 6px; } .content { padding: 20px 30px; background-color: white; border-radius: 6px; } .content h2 { margin-top: 0; } .content p { margin: 10px 0; } .post-date { color: #6e6e6e; margin-right: 10px; } /* 深色模式样式 */ .dark body { background-color: #1a1a1a; color: #e0e0e0; } .dark .container { background-color: inherit; } .dark .date { color: #ffffff; } .dark .content { background-color: #2a2a2a; } .dark .content h2 { color: #f0f0f0; } .dark .post-date { color: #bbbbbb; } \u0026lt;/style\u0026gt; \u0026lt;article class=\u0026#34;timeline\u0026#34;\u0026gt; {{ if .Params.showHero | default (.Site.Params.article.showHero | default false) }} {{ $heroStyle := .Params.heroStyle }} {{ if not $heroStyle }}{{ $heroStyle = .Site.Params.article.heroStyle }}{{ end }} {{ $heroStyle := print \u0026#34;partials/hero/\u0026#34; $heroStyle \u0026#34;.html\u0026#34; }} {{ if templates.Exists $heroStyle }} {{ partial $heroStyle . }} {{ else }} {{ partial \u0026#34;partials/hero/basic.html\u0026#34; . }} {{ end }} {{ end }} \u0026lt;header id=\u0026#34;single_header\u0026#34; class=\u0026#34;mt-5 max-w-prose\u0026#34;\u0026gt; {{ if .Params.showBreadcrumbs | default (.Site.Params.article.showBreadcrumbs | default false) }} {{ partial \u0026#34;breadcrumbs.html\u0026#34; . }} {{ end }} \u0026lt;h1 class=\u0026#34;mt-0 text-4xl font-extrabold text-neutral-900 dark:text-neutral\u0026#34;\u0026gt; {{ .Title | emojify }} \u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;section class=\u0026#34;all-posts mt-8 article-content\u0026#34;\u0026gt; {{ range .Site.RegularPages.GroupByDate \u0026#34;2006\u0026#34; }} \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;date\u0026#34;\u0026gt;{{ .Key }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; {{ range .Pages.GroupByDate \u0026#34;January\u0026#34; }} \u0026lt;h3 class=\u0026#34;text-xl font-semibold mt-6 mb-3\u0026#34;\u0026gt; {{ index $.Site.Data.month (printf \u0026#34;%d\u0026#34; .Key) }} \u0026lt;/h3\u0026gt; \u0026lt;ul class=\u0026#34;list-none\u0026#34; style=\u0026#34;padding-left: 1.2em;\u0026#34;\u0026gt; {{ range .Pages }} \u0026lt;li class=\u0026#34;mb-3 flex items-start\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;post-date\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;01-02\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34; class=\u0026#34;text-primary-600 dark:text-primary-400 hover:underline\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/section\u0026gt; \u0026lt;footer class=\u0026#34;pt-8 max-w-prose print:hidden\u0026#34;\u0026gt; {{ partial \u0026#34;article-pagination.html\u0026#34; . }} {{ if .Params.showComments | default (.Site.Params.article.showComments | default false) }} {{ if templates.Exists \u0026#34;partials/comments.html\u0026#34; }} \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; \u0026lt;hr class=\u0026#34;border-dotted border-neutral-300 dark:border-neutral-600\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; {{ partial \u0026#34;comments.html\u0026#34; . }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ else }} {{ warnf \u0026#34;[BLOWFISH] Comments are enabled for %s but no comments partial exists.\u0026#34; .File.Path }} {{ end }} {{ end }} \u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; {{ end }}\r在 content/archives 新增 _index.md：\n--- title: \u0026#34;所有文章\u0026#34; layout: \u0026#34;archive\u0026#34; description: \u0026#34;所有文章列表\u0026#34; ---\r最後，在menus.zh-tw.toml新增：\n[[footer]] name = \u0026#34;所有文章\u0026#34; pageRef = \u0026#34;archives\u0026#34; weight = 40\r3. 閱讀進度 加上文章閱讀進度比例。\n在 static/js/progress-bar.js 貼上 document.addEventListener(\u0026#39;scroll\u0026#39;, function () { const scrollTop = document.documentElement.scrollTop || document.body.scrollTop; const scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight; const clientHeight = document.documentElement.clientHeight || window.innerHeight; const scrollPercent = (scrollTop / (scrollHeight - clientHeight)) * 100; document.getElementById(\u0026#39;progress-bar\u0026#39;).style.width = scrollPercent + \u0026#39;%\u0026#39;; });\r在 layouts/_default/single.html 找到 \u0026lt;header\u0026gt; \u0026lt;header\u0026gt; ，在他的前後分別貼上 \u0026lt;div id=\u0026#34;progress-bar\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;{{ \u0026#34;js/progress-bar.js\u0026#34; | relURL }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r在 assets/css/custom.css 貼上 #progress-bar { position: fixed; top: 0; left: 0; width: 0%; height: 3px; background-color: #dc3434; /* You can change this color */ z-index: 50; /* 99999 */ }\r4. 簡碼 - hint 移植 alex-shpak/hugo-book 的 hint shortcode。 Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\n在 assets/css/custom.css 加入\n.book-hint { padding: 0.5em 1em; margin: 1em 0; border-left: 6px solid; border-radius: 4px; font-style: normal; /* 確保文字不斜體 */ font-weight: normal; /* 確保文字不粗體 */ } .book-hint .hint-content { margin: 0; font-style: normal; /* 確保文字不斜體 */ font-weight: normal; /* 確保文字不粗體 */ } .book-hint .hint-content \u0026gt; p:first-child { margin-top: 0; font-style: normal; /* 確保文字不斜體 */ font-weight: normal; /* 確保文字不粗體 */ } .book-hint .hint-content \u0026gt; p:last-child { margin-bottom: 0; font-style: normal; /* 確保文字不斜體 */ font-weight: normal; /* 確保文字不粗體 */ } /* Info hint */ .book-hint.info { border-color: #2196f3; background-color: rgba(33, 150, 243, 0.1); } /* Warning hint */ .book-hint.warning { border-color: #ffeb3b; background-color: rgba(255, 235, 59, 0.1); } /* Danger hint */ .book-hint.danger { border-color: #f44336; background-color: rgba(244, 67, 54, 0.1); } .book-hint .expand-wrapper { margin-top: 1em; /* 為所有在 hint 內的 expand 添加上邊距 */ } .book-hint\u0026gt;p:first-child+.expand-wrapper, .book-hint\u0026gt;.expand-wrapper:first-child { margin-top: 0; /* 如果 expand 是 hint 中的第一個元素或緊跟在第一個段落後面，則移除頂部邊距 */ } .book-hint .hint-content \u0026gt; h1, .book-hint .hint-content \u0026gt; h2, .book-hint .hint-content \u0026gt; h3, .book-hint .hint-content \u0026gt; h4, .book-hint .hint-content \u0026gt; h5, .book-hint .hint-content \u0026gt; h6 { margin-top: 0.5rem; margin-bottom: 0.5rem; }\r新增 layouts/shortcodes/hint.html 並貼上\n\u0026lt;blockquote class=\u0026#34;book-hint {{ .Get 0 }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;hint-content\u0026#34;\u0026gt; {{ .Inner | .Page.RenderString }} \u0026lt;/div\u0026gt; \u0026lt;/blockquote\u0026gt;\r5. 簡碼 - expand 比較美觀的 expand UI，一樣從 alex-shpak/hugo-book 拿來的，範例如下： Example\r可用 Markdown 語法\nint x = 1;\rlist 1 list 2 (bold) 5 Title 支援內部渲染 hint shortcode\nint x = 1;\rlist 1 list 2 (bold) 5 新增 layouts/shortcodes/expand.html\n\u0026lt;div class=\u0026#34;expand-wrapper prose dark:prose-invert max-w-prose zen-mode-content\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;{{ .Get \u0026#34;id\u0026#34; | default (printf \u0026#34;expand-%d\u0026#34; (.Ordinal)) }}\u0026#34; class=\u0026#34;expand-toggle\u0026#34; type=\u0026#34;checkbox\u0026#34; {{ if or (.Get \u0026#34;open\u0026#34;) (in .Params \u0026#34;open\u0026#34;) }}checked{{ end }}\u0026gt; \u0026lt;label for=\u0026#34;{{ .Get \u0026#34;id\u0026#34; | default (printf \u0026#34;expand-%d\u0026#34; (.Ordinal)) }}\u0026#34; class=\u0026#34;expand-title\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;expand-icon\u0026#34;\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-chevron-down\u0026#34;\u0026gt; \u0026lt;polyline points=\u0026#34;6 9 12 15 18 9\u0026#34;\u0026gt;\u0026lt;/polyline\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/span\u0026gt; {{- $summary := cond .IsNamedParams (.Get \u0026#34;title\u0026#34;) (.Get 0) -}} {{ $summary | .Page.RenderString }} \u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;expand-content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;expand-inner\u0026#34;\u0026gt; {{ .Inner | .Page.RenderString }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\r新增 assets/css/custom.css\n.expand-wrapper { border: 1px solid #ddd; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); margin-bottom: 1rem; background-color: #fff; /* 預設背景顏色 */ width: 100%; transition: max-width 0.3s ease-in-out; } body.zen-mode-enable .zen-mode-content { max-width: 100% !important; } .expand-toggle { display: none; } .expand-title { display: flex; align-items: center; padding: 0.75rem 1rem; /* 調整上下邊距 */ background-color: #f7f7f7; /* 預設背景顏色 */ color: #333; /* 預設文字顏色 */ cursor: pointer; transition: background-color 0.3s ease, color 0.3s ease; font-weight: normal; /* 取消粗體樣式 */ } .expand-title:hover { background-color: #e0e0e0; } .expand-title .expand-icon { margin-right: 0.5rem; /* 調整圖標與文字之間的距離 */ } .expand-content { max-height: 0; overflow: hidden; transition: max-height 0.5s cubic-bezier(0, 1, 0, 1); background-color: #fff; padding: 0 1.8rem; } .expand-toggle:checked~.expand-content { max-height: 8000px; /* 可以根據需要調整 */ transition: max-height 0.8s ease-in-out; } .expand-inner { margin: -0.5rem 0; /* 使用負邊距縮短內容區域與邊框的距離 */ padding: 0.5rem 0; /* 可根據需要調整 */ color: #333; /* 預設文字顏色 */ } /* 暗色模式樣式 */ .dark .expand-wrapper { border-color: #444; /* 暗色模式下的邊框顏色 */ background-color: #222; /* 暗色模式下的背景顏色 */ } .dark .expand-title { background-color: #333; /* 暗色模式下的標題背景顏色 */ color: #e0e0e0; /* 暗色模式下的標題文字顏色 */ } .dark .expand-title:hover { background-color: #444; /* 暗色模式下的標題懸停背景顏色 */ } .dark .expand-content { background-color: #2c2c2c; /* 暗色模式下的內容背景顏色 */ } .dark .expand-inner { color: #e0e0e0; /* 暗色模式下的內容文字顏色 */ }\r6. 自動加上編輯時間 在文章末放上編輯日期提醒。\n在 layouts/_default/single.html 找到 {{ .Content }} ，在他下面貼上：\n\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;max-w-fit\u0026#34;\u0026gt; {{ if ne (.Lastmod.Format \u0026#34;2006-01-02\u0026#34;) (.Date.Format \u0026#34;2006-01-02\u0026#34;) }} \u0026lt;div class=\u0026#34;lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\u0026#34;\u0026gt; {{- $lastmodContent := partial \u0026#34;meta/date-updated.html\u0026#34; .Lastmod -}} {{ (printf \u0026#34;{{/%% hint info /%%}}文章更新：%s{{/%% /hint /%%}}\u0026#34; $lastmodContent) | markdownify }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt;\r記得要把 %% 前面的 / 刪掉。\n7. 修改 metadata Google 以不再用 keywords 為 SEO 關鍵字所以沒必要改這個。 原文\rGoogle SEO 會參考 meta name，而 Blowfish 的 tags 優先於 keywords 關鍵字。想要有 SEO 同時不想要 tags 打一堆次要標籤的修改如下：\n找到 layouts/partials/head.html 中的\n{{ with .Params.Tags | default .Site.Params.keywords -}} \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;{{ range . }}{{ . }}, {{ end -}}\u0026#34; /\u0026gt; {{- end }}\r整段換成\n{{- $mytags := .Params.Tags | default slice -}} {{- $mykeywords := .Params.Keywords | default .Site.Params.keywords -}} {{- $allKeywords := $mytags | append $mykeywords | uniq -}} {{ if $allKeywords }} \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;{{ delimit $allKeywords \u0026#34;, \u0026#34; }}\u0026#34; /\u0026gt; {{ end }} ","date":"2024-07-01","id":11,"permalink":"/docs/nas/blowfish/advance-custom/","summary":"此客製化基於 hugo blowfish theme 完成。\n大部分的程式都由 GPT 完成，偉哉 GPT。\n1. 超連結 游標移動到連結時變色+底線。範例\n在assets/css/custom.css新增以下：\n.article-content a { color: rgb(65, 105, 225); /* 使用淡藍色 */ } /* 懸停時底線改為粗線並增加距離 */ .","tags":[],"title":"進階客製化"},{"content":"","date":"2023-12-12","id":12,"permalink":"/docs/notes/","summary":"","tags":[],"title":"Notes"},{"content":"","date":"2023-12-12","id":13,"permalink":"/docs/nas/","summary":"","tags":[],"title":"NAS"},{"content":"","date":"2023-12-12","id":14,"permalink":"/docs/nas/blowfish/","summary":"","tags":[],"title":"Hugo Blowfish"},{"content":"","date":"2023-09-07","id":15,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2023-12-12","id":16,"permalink":"/docs/notes/knowledge/","summary":"","tags":[],"title":"Others"},{"content":"tmux cheatsheet\n使用情境 保存會話：SSH 斷開後程序繼續運行\n例如使用 SSH 遠端控制執行耗時指令，使用 tmux 就可以使連線結束後指令繼續執行。 多視窗管理：單一終端內切換多個工作區\n同時執行多個指令可分離工作區。 [網路上抄的] 共享會話：會議和教學\n允許多個用戶連接到同一個 tmux 會話，便於協作和教學。 基礎篇 安裝\nsudo apt install tmux\r啟用 tmux，執行耗時指令，離開 tmux 以及 SSH，指令分別為\ntmux new -s [會話名稱] # run your commands ctrl+b d # 離開會話 tmux attach -t [會話名稱]\r使用時下方狀態欄為 [會話名稱] ID:[視窗名稱]*，星號是所在視窗。你可以創建會話中包含多個視窗，又包含多個窗格，所有東西都是獨立的。\n指令整理 tmux 指令都是 prefix + \u0026quot;操作\u0026quot;，預設 prefix 是 ctrl+b。\n會話管理 創建：tmux new -s [會話名稱] 列出：tmux ls 進入：tmux attach -t [會話名稱] 離開：ctrl+b d 重新命名：ctrl+b $\r視窗管理 創建：ctrl+b c 重新命名：ctrl+b , 關閉：ctrl+b \u0026amp; # 切換視窗 上：ctrl+b p 下：ctrl+b n 指定編號：ctrl+b [0-9]\r窗格管理 創建垂直窗格：ctrl+b % 創建水平窗格：ctrl+b \u0026#34; 關閉窗格：ctrl+b x 移動：ctrl+b [方向鍵] 切換佈局：ctrl+b [空格鍵] 縮放窗格：ctrl+b z\r複製模式 進這個模式才可以上下移動。\n進入：ctrl+b [ 離開：q\r命令模式 ctrl+b : 進入命令模式，在命令模式中，可以輸入各種 tmux 命令，如 new-window、split-window 等\n不知道可以幹嘛 顯示時鐘：ctrl+b t\n抱怨 剛寫完部落格的誕生，邊寫邊查這篇馬上就遇到一樣的問題：網路資訊廢話一堆。有篇文章在當下是 Google 直接搜尋 tmux 第二個結果，SEO 這麼高的文章寫一堆有的沒的花了 1/4 的篇幅才講到如何安裝，然後結尾才寫為什麼要用這項工具，這個人是從來沒有寫過文章嗎？但錯的不是他，是 Google SEO 的問題。\n","date":"2024-07-21","id":17,"permalink":"/docs/notes/programming/tmux/","summary":"tmux cheatsheet\n使用情境 保存會話：SSH 斷開後程序繼續運行\n例如使用 SSH 遠端控制執行耗時指令，使用 tmux 就可以使連線結束後指令繼續執行。 多視窗管理：單一終端內切換多個工作區\n同時執行多個指令可分離工作區。 [網路上抄的] 共享會話：會議和教學\n允許多個用戶連接到同一個 tmux 會話，便於協作和教學。 基礎篇 安裝\nsudo apt install tmux\r啟用 tmux，執行耗時指令，離開 tmux 以及 SSH，指令分別為","tags":[],"title":"tmux"},{"content":"此客製化基於 hugo blowfish theme 完成。\n大部分的程式都由 GPT 完成，偉哉 GPT。\n1. 標籤與分類分別顯示 這超麻煩不過改完後很滿意。我應該是唯一一個修好他的人。\n把 partials/badge.html 改成 \u0026lt;span class=\u0026#34;badge badge-tag border border-primary-600 text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\u0026#34;\u0026gt; {{ . }} \u0026lt;/span\u0026gt;\r在 partials/article-meta/basic.html 中找到 {{/* Output taxonomies */}}，整段改成 \u0026lt;div style=\u0026#34;height: .25rem;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; {{/* Output taxonomies */}} {{ if .Params.showTaxonomies | default (.Site.Params.article.showTaxonomies | default false) }} \u0026lt;div class=\u0026#34;basicHtml-div\u0026#34;\u0026gt; {{/* Output taxonomies */}} {{ if .Params.showTaxonomies | default (.Site.Params.article.showTaxonomies | default false) }} \u0026lt;div class=\u0026#34;basicHtml-div\u0026#34;\u0026gt; {{ with .Params.categories }} \u0026lt;div class=\u0026#34;flex flex-wrap items-center mr-4 mb-2\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;\u0026#34; style=\u0026#34;font-size: 1.1rem; position: relative; top: -0.15em; left: -0.0em; margin-right: .5rem;\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; \u0026#34;list\u0026#34; }} \u0026lt;/span\u0026gt; {{ range . }} \u0026lt;span class=\u0026#34;mr-1 mb-1\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ printf \u0026#34;/categories/%s\u0026#34; (urlize . | lower) }}\u0026#34; class=\u0026#34;inline-block relative\u0026#34;\u0026gt; {{ partial \u0026#34;badge.html\u0026#34; . }} \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;basicHtml-div\u0026#34;\u0026gt; {{ with .Params.tags }} \u0026lt;div class=\u0026#34;flex flex-wrap items-center mr-4 mb-2\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;\u0026#34; style=\u0026#34;font-size: 1.1rem; position: relative; top: -0.15em; left: -0.0em; margin-right: .5rem;\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; \u0026#34;tag\u0026#34; }} \u0026lt;/span\u0026gt; {{ range . }} \u0026lt;span class=\u0026#34;mr-1 mb-1\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ printf \u0026#34;/tags/%s\u0026#34; (urlize . | lower) }}\u0026#34; class=\u0026#34;inline-block relative\u0026#34;\u0026gt; {{ partial \u0026#34;badge.html\u0026#34; . }} \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }}\r修改 article-link\n這太多要改直接放連結，其實就是把整個都能按改成只有圖片跟標題能按。\ncustom.css 加入\n.badge { display: inline-block; padding: 0.3em .45em; background-color: transparent; border-radius: 0.725rem; margin-right: 0.05rem; margin-bottom: 0.05rem; } .badge:hover { background-color: rgb(var(--color-primary-200)); } .dark .badge:hover { background-color: rgb(var(--color-primary-700)); } .basicHtml-div { margin-bottom: -.6em; /* 調整底部間距 */ padding: 0; }\r2. 文章封面 發現 Blowfish 預設無法單獨設定文章縮圖，於是把 Cover 關鍵字拿來當文章縮圖。文章圖片的關鍵字有四個並分為兩種：\ncover/thumbnail/featured: 縮圖+進入文章後的照片 background: 只有進入後的照片 把 layouts/partials/hero 中所有的 *cover*, 刪掉即可。\n3. 改善對比度 在 assets/css/schemes/blowfish.css 修改以下三項：\n--color-neutral-300: 216, 227, 240; # 文字顏色 --color-neutral-500: 88, 102, 122; # 文章資訊顏色 --color-neutral-700: 25, 33, 43; # 文字顏色 --color-primary-800: 25, 33, 43; # 忘了\r數字可以自己調。\n在 /blog/themes/blowfish/assets/css/compiled/main.css 的 .prose { 中，把下面第一行改成第二行，第二行的顏色去上面的 schemes css 中修改\n--tw-prose-hr:rgba(var(--color-neutral-200), 1); --tw-prose-hr:rgba(var(--color-neutral-7), 1);\r4. 網站 logo favicons 應該直接放在 static 資料夾中就可以直接使用，但不知為何要把相同的程式碼再貼成 custom favicon 才可用。順便改放在 /static/image 資料夾中\n在 layouts/partials 新增 favicons.html ，新增以下：\n\u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;192x192\u0026#34; href=\u0026#34;{{ \u0026#34;android-chrome-192x192.png\u0026#34; | absURL }}\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;512x512\u0026#34; href=\u0026#34;{{ \u0026#34;android-chrome-512x512.png\u0026#34; | absURL }}\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;180x180\u0026#34; href=\u0026#34;{{ \u0026#34;apple-touch-icon.png\u0026#34; | absURL }}\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;32x32\u0026#34; href=\u0026#34;{{ \u0026#34;favicon-32x32.png\u0026#34; | absURL }}\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;16x16\u0026#34; href=\u0026#34;{{ \u0026#34;favicon-16x16.png\u0026#34; | absURL }}\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; href=\u0026#34;{{ \u0026#34;favicon.ico\u0026#34; | absURL }}\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;manifest\u0026#34; href=\u0026#34;{{ \u0026#34;site.webmanifest\u0026#34; | absURL }}\u0026#34;\u0026gt;\r5. 網頁標籤名稱 把 blowfish 預設的 dot 改為 dash。\n找到 layouts/partials/head.html 中以下片段：\n\u0026lt;title\u0026gt;{{ .Title | emojify }} \u0026amp;middot; {{ .Site.Title | emojify }}\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;title\u0026#34; content=\u0026#34;{{ .Title | emojify }} \u0026amp;middot; {{ .Site.Title | emojify }}\u0026#34; /\u0026gt;\r把 \u0026amp;middot 改為 -。\n6. 註腳（文章引用） 縮小 footnote 字體以及修改標籤樣式，讓他長得比較像論文格式。\n在 assets/css/custom.css 中，新增以下：\n/* 縮小 footnote 字體 */ .footnotes { font-size: 0.7em; } /* footnote 引用樣式 */ .footnote-ref::before { content: \u0026#34;[\u0026#34;; } .footnote-ref::after { content: \u0026#34;]\u0026#34;; } /* 調整 sup 標籤樣式 */ sup { font-size: xx-small; vertical-align: super; } /* 移除原本的編號樣式 */ .footnotes ol { list-style-type: none; /* 移除原本的編號 */ padding-left: 0; } /* 修改 footnote 列表項的樣式 */ .footnotes ol li { counter-increment: footnote; /* 增加計數器 */ position: relative; margin-left: 2em; /* 調整左邊距，使其與文章內容有適當間隔 */ line-height: 1.8; /* 調整行高，使超連結可以正確顯示 */ margin-bottom: -1.2em; /* 調整每個 footnote 間的距離 */ } .footnotes ol li:before { content: \u0026#34;[\u0026#34; counter(footnote) \u0026#34;]\u0026#34;; /* 使用計數器顯示編號 */ font-weight: normal; position: absolute; left: -1.5em; /* 將編號設置在列表項的左側 */ } /* 將原始編號隱藏 */ .footnotes ol li a:first-child { display: inline-block; /* 保留超連結的顯示 */ }\r7. 美化選集功能 把選集功能後面的「- 本文屬於一個選集。」刪掉。 修改選集樣式並把本文也加上超連結。 刪掉「- 本文屬於一個選集。」：找到 layouts/partials/series/series_base.html ，修改為\n{{ if .Params.series }} \u0026lt;summary class=\u0026#34;py-1 text-lg font-semibold cursor-pointer bg-primary-200 text-neutral-800 ltr:-ml-5 ltr:pl-5 rtl:-mr-5 rtl:pr-5 dark:bg-primary-800 dark:text-neutral-100\u0026#34;\u0026gt; {{ index .Params.series 0 }} \u0026lt;/summary\u0026gt; {{ $seriesName := strings.ToLower (index .Params.series 0) }} {{ range $post := sort (index .Site.Taxonomies.series $seriesName) \u0026#34;Params.series_order\u0026#34; }} {{ if eq $post.Permalink $.Page.Permalink }} \u0026lt;div class=\u0026#34;py-1 border-dotted border-neutral-300 ltr:-ml-5 ltr:border-l ltr:pl-5 rtl:-mr-5 rtl:border-r rtl:pr-5 dark:border-neutral-600\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{$post.Permalink}}\u0026#34;\u0026gt; {{ i18n \u0026#34;article.part\u0026#34; }}{{ $post.Params.series_order }} {{ i18n \u0026#34;article.this_article\u0026#34; }} {{ $post.Params.title}} \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {{ else }} \u0026lt;div class=\u0026#34;py-1 border-dotted border-neutral-300 ltr:-ml-5 ltr:border-l ltr:pl-5 rtl:-mr-5 rtl:border-r rtl:pr-5 dark:border-neutral-600\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{$post.Permalink}}\u0026#34;\u0026gt; {{ i18n \u0026#34;article.part\u0026#34; }}{{ $post.Params.series_order }} {{ $post.Params.title}} \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {{end}} {{end}} {{end}}\r$post.Permalink 裡面就是選集樣式。再去 i18n 中把修改自己語言的檔案，我的改成以下：\npart: \u0026#34;#\u0026#34; this_article: \u0026#34;[本文]\u0026#34;\r8. 關閉相關文章簡介 主目錄想要有文章簡介，但是相關文章也出現簡介就太亂。\n在 layouts/partials/article-link/card-related.html 註解掉\n{{ if .Params.showSummary | default (.Site.Params.list.showSummary | default false) }} \u0026lt;div class=\u0026#34;py-1 prose dark:prose-invert\u0026#34;\u0026gt; {{ .Summary }} \u0026lt;/div\u0026gt; {{ end }}\r9. 文章資訊間隔符號 加上編輯時間就後就顯得凌亂，修改樣式。把 layouts/partials/article-meta/basic.html 中的\n{{ delimit . \u0026#34;\u0026lt;span class=\\\u0026#34;px-2 text-primary-500\\\u0026#34;\u0026gt;\u0026amp;middot;\u0026lt;/span\u0026gt;\u0026#34; | safeHTML }}\r改為\n{{ delimit . \u0026#34;\u0026lt;span class=\\\u0026#34;px-2 text-neutral-500\\\u0026#34;\u0026gt;\u0026amp;VerticalLine;\u0026lt;/span\u0026gt;\u0026#34; | safeHTML }}\r10. 模糊設定 去主題的 github 搜尋 backdrop-blur path:*.html 裡面有所有能調整的頁面，選你想要的調整，內建 .backdrop-blur (8px) .backdrop-blur-sm (4px) .backdrop-blur-2xl (40px)。\n相同位置下的 scroll / 300 是漸層距離。\n11. 頁面目次 ToC 此問題官方已於 blowfish v2.71.0 修正，不過ToC官方目前還沒有很完整。 原文\rToC過長時增加滾輪。\n把 layouts/partials/toc.html 中 \u0026lt;details open class\u0026gt; 整段換成以下：\n\u0026lt;details open class=\u0026#34;toc-right mt-0 overflow-hidden rounded-lg ltr:-ml-5 ltr:pl-5 rtl:-mr-5 rtl:pr-5 hidden lg:block\u0026#34;\u0026gt; \u0026lt;summary class=\u0026#34;block py-1 text-lg font-semibold cursor-pointer bg-neutral-100 text-neutral-800 ltr:-ml-5 ltr:pl-5 rtl:-mr-5 rtl:pr-5 dark:bg-neutral-700 dark:text-neutral-100 lg:hidden\u0026#34;\u0026gt; {{ i18n \u0026#34;article.table_of_contents\u0026#34; }} \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;min-w-[220px] py-2 border-dotted border-neutral-300 ltr:-ml-5 ltr:border-l ltr:pl-5 rtl:-mr-5 rtl:border-r rtl:pr-5 dark:border-neutral-600\u0026#34; style=\u0026#34;max-height: 450px; overflow-y: auto;\u0026#34;\u0026gt; {{ .TableOfContents | emojify }} \u0026lt;/div\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;details class=\u0026#34;toc-inside mt-0 overflow-hidden rounded-lg ltr:-ml-5 ltr:pl-5 rtl:-mr-5 rtl:pr-5 lg:hidden\u0026#34;\u0026gt; \u0026lt;summary class=\u0026#34;py-1 text-lg font-semibold cursor-pointer bg-neutral-100 text-neutral-800 ltr:-ml-5 ltr:pl-5 rtl:-mr-5 rtl:pr-5 dark:bg-neutral-700 dark:text-neutral-100 lg:hidden\u0026#34;\u0026gt; {{ i18n \u0026#34;article.table_of_contents\u0026#34; }} \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;py-2 border-dotted border-neutral-300 ltr:-ml-5 ltr:border-l ltr:pl-5 rtl:-mr-5 rtl:border-r rtl:pr-5 dark:border-neutral-600\u0026#34; style=\u0026#34;max-height: 450px; overflow-y: auto;\u0026#34;\u0026gt; {{ .TableOfContents | emojify }} \u0026lt;/div\u0026gt; \u0026lt;/details\u0026gt;\r","date":"2024-07-01","id":18,"permalink":"/docs/nas/blowfish/bug-fix/","summary":"此客製化基於 hugo blowfish theme 完成。\n大部分的程式都由 GPT 完成，偉哉 GPT。\n1. 標籤與分類分別顯示 這超麻煩不過改完後很滿意。我應該是唯一一個修好他的人。\n把 partials/badge.html 改成 \u0026lt;span class=\u0026#34;badge badge-tag border border-primary-600 text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\u0026#34;\u0026gt; {{ .","tags":[],"title":"問題修復"},{"content":"快速看完 看完這張圖這篇文章就不用看了。 正文 最近用WebP轉存圖片轉得很開心，壓二次元圖隨便都是80%以上壓縮率，現在來關心一下他的解碼性能。\n根據 Google Group 上的討論1， WebP 的解碼速度是弱於 JPG 的，畢竟 JPG 都已經發展這麼久了軟硬體都已經很成熟。這麼說來 WebP 除了壓縮率以外沒有優勢嗎？並不是， WebP 是為了網路而生，把下載時間也算進來整體載入速度是提高的，如果有增量解碼載入速度提升更多。\n至於轉換品質，這裡有一個懶人包2的設定，簡單來說80~85是一個甜蜜點。\n註1：他沒有給單位映射，libavif quality 為063，他把全部都換成1100了。\n註2：此外他使用 DSSIM 而非常見的 SSIM 作為指標。\n註3：根據圖片不同可能轉了之後反而容量更大。\n其實這應該是第二篇，第一篇是各種次世代編碼的選擇，不過這篇資料都在手上就先寫出來了。最後34是其他評測。\nComparative Analysis on WebP and JPEG Decoding Performance, Google Group, Oct. 2023.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAVIF and WebP encoding quality settings, cramforce@Github, Feb. 2021.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nContemplating Codec Comparisons, JON SNEYERS, Cloudinary, Dec. 2022.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLossless and Transparency Encoding in WebP, J. Alakuijala and V. Rabaud, Google Inc., Aug. 2017.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-06-20","id":19,"permalink":"/docs/notes/knowledge/webp-performance/","summary":"快速看完 看完這張圖這篇文章就不用看了。 正文 最近用WebP轉存圖片轉得很開心，壓二次元圖隨便都是80%以上壓縮率，現在來關心一下他的解碼性能。\n根據 Google Group 上的討論1， WebP 的解碼速度是弱於 JPG 的，畢竟 JPG 都已經發展這麼久了軟硬體都已經很成熟。這麼說來 WebP 除了壓縮率以外沒有優勢嗎？並不是， WebP 是為了網路而生，把下載時間也算進來整體載入速度是提高的，如果有增量解碼載入速度提升更多。\n至於轉換品質，這裡有一個懶人包2的設定，簡單來說80~85是一個甜蜜點。\n註1：他沒有給單位映射，libavif quality 為063，他把全部都換成1100了。","tags":[],"title":"WebP圖片壓縮與解碼性能"},{"content":"先說結論：\nmethod 1是 Emil Björnson 回覆的可信度最高。 method 2/3 少了 Emil 說的 LOS path random phase，而 method 2/3 不同處是 NLOS path的 以及分母的 。 method 4/5 應該是不同的 formatting 方式。 Method 1: Emil Björnson 來源\n有 Emil Björnson 大神回覆可信度最高，他本人也寫了一篇文章解釋 rician fading 很多人都做錯。跟MATLAB和這裡的生成方式一樣。\nMethod 2 來源\nMethod 3 來源\nMethod 4 來源\nMethod 5 來源\n測試此篇的nakagami fading是否正確！！ % LOS components a = sqrt(K/2); b = a; % in-phase component i = a + randn([1 size]); % quadtature component q = b + randn([1 size]); % build fading component s = (i + 1j*q);\rMethod 6 來源\n此篇理論值與模擬不同，需要檢查為何錯誤！！ mean = sqrt(k1/(k1+1)); % mean sigma = sqrt(1/(2*(k1+1))); %variance Nr2 = randn(N, 1)*sigma+mean; Ni2 = randn(N, 1)*sigma; % To generate the Rician Random Variable h_rac = sqrt(Nr2.^2+Ni2.^2); %Rician fading coefficient\rTODO:\n對method 2/3: 查原文書確認些分母是 \\(k+1\\) 或 \\(2k+1\\) 對method 2/3: 查原文書對Rayleigh fading 母數 \\(\\sigma\\) 的解釋 確認 method 4 中對 Nakagami fading 的模擬是否正確 確認 method 5 錯在哪裡 ","date":"2024-06-14","id":20,"permalink":"/docs/rician-fading%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F%E5%8C%85%E5%90%ABemil-bj%C3%B6rnson%E5%A4%A7%E5%B8%AB%E7%9A%84%E6%AD%A3%E8%A7%A3/","summary":"先說結論：\nmethod 1是 Emil Björnson 回覆的可信度最高。 method 2/3 少了 Emil 說的 LOS path random phase，而 method 2/3 不同處是 NLOS path的 以及分母的 。 method 4/5 應該是不同的 formatting 方式。 Method 1: Emil Björnson 來源","tags":[],"title":"Rician Fading生成方式，包含Emil Björnson大師的正解"},{"content":"\r2024/7/25 更新 看到網路上有人手動設定 thread 就研究了一下這參數的設定，預設是\nh-\u0026gt;param.i_threads = x264_cpu_num_processors() * (h-\u0026gt;param.b_sliced_threads?2:3)/2;\r也就是沒有 sliced 用 1 倍 CPU 核心數的線程數，反之 1.5 倍，而 sliced 指的是把每幀切成小圖片處理。根據自己隨手亂做的實驗，預設就很好了不用自己手動調整。\n2024/7/16 更新 寫這篇的時候其實是覺得 H.265 跟 AV1 好酷，結果發現還有更新的 AV2 已經在理論階段，以及 H.266/VVC 硬體解碼已經實裝，甚至 MPEG-5 已經在 PhotoPrism 支援。然而 H.266 似乎會重蹈 H.265 的覆轍死在複雜的專利權上（出自 VLC 創辦人）。\n最後，令人意外的是字結跳動 / 夏普 / 聯發科在 H.266 專利數上竟然貢獻這麼高。\n結果轉完分數只有60。\n基本知識 CRF 越高壓縮率越高，畫質越低。而 CRF 值越低，畫質越高，但文件大小也越大。CRF 範圍是指數級的，因此增加 CRF 值 +6 會導致位元率/文件大小大約減半 (來源)。\n預設 CRF 值：\nH.264: 23 H.265 (x265): 28 VP9: 31 AV1: 35 每個編解碼器的 CRF 是獨立的。推薦的 CRF 設置也可以在 這裡 找到。\n迷思：CRF 18 為視覺無損。考慮CRF 12 才能使高解析度的影片在超大屏幕上恰好視覺無損，那 CRF 18 如何能視覺無損？\nThe_Vista_Group@reddit:\nVisual lossless quality always depends on the source. That\u0026rsquo;s why there are various encoder parameters to tweak.\n安裝 目前使用HandBrake (v1.8.0) 有異常旋轉問題！\nGUI: HandBrake. It uses FFmpeg as its backend.\nCLI: FFmpeg\nbrew install ffmpeg\r使用方法 HandBrake 1. 選擇一個 `Preset` 2. 點擊 `Open Source` 3. 選擇 `title` 並單獨調整 4. 將此標題添加到隊列 5. 添加所有文件到隊列後，開始轉換。 FFmpeg 使用方法 轉換整個資料夾 將文件夾中的 \\*.mov 轉換為 h.265 並輸出到 ../output 文件夾\nfor file in *.mov; do ffmpeg -i \u0026#34;$file\u0026#34; -c:v libx265 -tag:v hvc1 -crf 28 \u0026#34;$../output/{file%.mov}.mp4\u0026#34;; done\r加上 hvc1 標籤以支援蘋果設備讀取。\nTwo-Pass Conversion What is two-pass? Source\n我昨天研究了一下，根據國外論壇的討論，發現 multi-pass 並非是用來增強畫質，而是用來控制流量而已。\n簡單地說，如果用 CRF（恒定質量）壓出一個 1GB 的影片，再用 2-pass 壓出同樣大小的影片，兩者畫質是幾乎沒有分別的。2-pass 畫質比較好是指和 CBR、ABR 的比較。如果沒有需要精確的流量控制，事實上並不需要用 multi-pass。而 pass 越多次，會越接近設定的流量。\nfor file in *.mov; do base=\u0026#34;${file%.mov}\u0026#34; ffmpeg -y -i \u0026#34;$file\u0026#34; -c:v libx265 -b:v 1500k -x265-params pass=1 -an -f null /dev/null \u0026amp;\u0026amp; \\ ffmpeg -i \u0026#34;$file\u0026#34; -c:v libx265 -b:v 1500k -x265-params pass=2 -c:a copy \u0026#34;../output/${base}.mp4\u0026#34; done\rYouTube 影片 YouTube 1080p 影片的畫質設定 (Source)\nffmpeg -i \u0026lt;INPUT\u0026gt; -c:v libx264 -preset slow -crf 18 -vf scale=out_color_matrix=bt709 -color_primaries bt709 -color_trc bt709 -colorspace bt709 -c:a aac -ar 48000 -ac 2 -b:a 320k -profile:v high -level 4.0 -bf 2 -coder 1 -pix_fmt yuv420p -b:v 10M -threads 4 -cpu-used 0 -r 30 -g 15 -movflags +faststart \u0026lt;OUTPUT\u0026gt;\r轉碼評分 VMAF 是 Netflix 開發的客觀全參考視訊品質指標。\nffmpeg -i \u0026#34;outputFile\u0026#34; -i \u0026#34;sourceFile\u0026#34; -lavfi libvmaf=log_fmt=json:log_path=output.json -f null -\rFind your vmaf models for macOS brew install\nbrew list libvmaf # find \u0026#34;outputPath\u0026#34; -name \u0026#34;vmaf_v0.6.1.pkl\u0026#34; find \u0026#34;/opt/homebrew/Cellar/libvmaf/3.0.0\u0026#34; -name \u0026#34;vmaf_v*.pkl\u0026#34; ffmpeg -i input.mp4 -i output.mp4 -lavfi libvmaf=\u0026#34;model_path=/path/model/vmaf_v0.6.1.pkl\u0026#34; -f null -\rffmpeg -i bug.mov -i bug.mov \\ -lavfi \u0026ldquo;libvmaf=model_path=/opt/homebrew/Cellar/libvmaf/model/vmaf_v0.6.1.json\u0026rdquo; -f null -\n實驗 使用 11秒 20MB 的影片實驗，不同長度和解析度的影片可能也會導致結果不同。\n使用方式 File Size Harmonic Mean compare itself 20MB 99.954336 -x265-params lossless=1 240MB 63.249678 CRF=16 17.5MB 62.898537 CRF=22 6.5MB 62.083465 CRF=28 2.6MB 60.153667 two-pass rate=1500 2.1MB 58.481517 handbreak rate=1500 2.3MB 59.386817 handbreak 6.7MB 62.118861 ffmpeg預設 2.4MB 58.975480 Full vmaf report compare itself\n\u0026ldquo;vmaf\u0026rdquo;: {\n\u0026ldquo;min\u0026rdquo;: 97.427842,\n\u0026ldquo;max\u0026rdquo;: 100.000000,\n\u0026ldquo;mean\u0026rdquo;: 99.954852,\n\u0026ldquo;harmonic_mean\u0026rdquo;: 99.954336\n}\n使用 -x265-params lossless=1\n\u0026ldquo;vmaf\u0026rdquo;: {\n\u0026ldquo;min\u0026rdquo;: 0.000000,\n\u0026ldquo;max\u0026rdquo;: 100.000000,\n\u0026ldquo;mean\u0026rdquo;: 92.043819,\n\u0026ldquo;harmonic_mean\u0026rdquo;: 63.249678\n}\n使用 crf=16:\n\u0026ldquo;vmaf\u0026rdquo;: {\n\u0026ldquo;min\u0026rdquo;: 0.000000,\n\u0026ldquo;max\u0026rdquo;: 100.000000,\n\u0026ldquo;mean\u0026rdquo;: 91.293176,\n\u0026ldquo;harmonic_mean\u0026rdquo;: 62.898537\n}\n使用 crf=22:\n\u0026ldquo;vmaf\u0026rdquo;: {\n\u0026ldquo;min\u0026rdquo;: 0.000000,\n\u0026ldquo;max\u0026rdquo;: 100.000000,\n\u0026ldquo;mean\u0026rdquo;: 89.517049,\n\u0026ldquo;harmonic_mean\u0026rdquo;: 62.083465\n}\n使用 crf=28:\n\u0026ldquo;vmaf\u0026rdquo;: {\n\u0026ldquo;min\u0026rdquo;: 0.000000,\n\u0026ldquo;max\u0026rdquo;: 100.000000,\n\u0026ldquo;mean\u0026rdquo;: 85.081152,\n\u0026ldquo;harmonic_mean\u0026rdquo;: 60.153667\n}\n使用 two-pass rate=1500:\n\u0026ldquo;vmaf\u0026rdquo;: {\n\u0026ldquo;min\u0026rdquo;: 0.000000,\n\u0026ldquo;max\u0026rdquo;: 99.919186,\n\u0026ldquo;mean\u0026rdquo;: 81.759161,\n\u0026ldquo;harmonic_mean\u0026rdquo;: 58.481517\n}\n使用 handbreak rate=1500:\n\u0026ldquo;vmaf\u0026rdquo;: {\n\u0026ldquo;min\u0026rdquo;: 0.000000,\n\u0026ldquo;max\u0026rdquo;: 100.000000,\n\u0026ldquo;mean\u0026rdquo;: 83.455953,\n\u0026ldquo;harmonic_mean\u0026rdquo;: 59.386817\n}\n使用 handbreak:\n\u0026ldquo;vmaf\u0026rdquo;: {\n\u0026ldquo;min\u0026rdquo;: 0.000000,\n\u0026ldquo;max\u0026rdquo;: 100.000000,\n\u0026ldquo;mean\u0026rdquo;: 89.575997,\n\u0026ldquo;harmonic_mean\u0026rdquo;: 62.118861\n}\n使用 ffmpeg預設:\n\u0026ldquo;vmaf\u0026rdquo;: {\n\u0026ldquo;min\u0026rdquo;: 0.000000,\n\u0026ldquo;max\u0026rdquo;: 100.000000,\n\u0026ldquo;mean\u0026rdquo;: 82.775001,\n\u0026ldquo;harmonic_mean\u0026rdquo;: 58.975480\n}\n","date":"2024-06-07","id":21,"permalink":"/docs/notes/knowledge/ffmpeg%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98/","summary":"2024/7/25 更新 看到網路上有人手動設定 thread 就研究了一下這參數的設定，預設是\nh-\u0026gt;param.i_threads = x264_cpu_num_processors() * (h-\u0026gt;param.b_sliced_threads?2:3)/2;\r也就是沒有 sliced 用 1 倍 CPU 核心數的線程數，反之 1.5 倍，而 sliced 指的是把每幀切成小圖片處理。根據自己隨手亂做的實驗，預設就很好了不用自己手動調整。","tags":[],"title":"FFmpeg基礎知識"},{"content":"網路上教學廢話好多好煩。\n沒人想看你把一堆 commit 版本號打出來，我還要一個一個對你在講哪個 commit，有夠蠢。\n原理篇 git是一個版本管理工具，實際使用時有三個層面，分別是你的硬碟、儲存庫 (git)、遠端儲存庫 (github/gitlab)。你的硬碟什麼都不知道，儲存庫會儲存所有版本，遠端儲存庫是最後版本。\n撰寫程式時，commit 提交新版本，push 到遠端讓大家看。\n基礎指令篇 1. 初始化 git init\r2. 索引檔案 git add \u0026lt;file-name\u0026gt; git add . # 新增全部檔案 git reset \u0026lt;file-name\u0026gt; # 移除索引檔案\r3. 提交版本並附註 git commit -m \u0026lt;comments\u0026gt;\r4. 查看狀態 git status git log\r5. 分支 git branch # 查看 git branch \u0026lt;name\u0026gt; # 新建 git checkout \u0026lt;name\u0026gt; # 切換 git branch -D \u0026lt;name\u0026gt; # 刪除 git branch -m \u0026lt;old-name\u0026gt; \u0026lt;new-name\u0026gt; # 改名 git merge \u0026#34;NAME\u0026#34; # 合併\r上傳到 Github 1. SSH 產生ssh金鑰 (Optional) 隱藏信箱Setting\u0026gt;Email勾選 \u0026ldquo;Block command line pushes that expose my email\u0026rdquo;，如要隱藏信箱，請到 https://api.github.com/users/你的github名稱 查看下面需要的 ID 設定名稱及信箱，如不需隱藏信箱則直接打自己的信箱 git config --global user.name \u0026#34;NAME\u0026#34; git config --global user.email \u0026#34;{ID}+{username}@users.noreply.github.com\u0026#34;\r上傳 git push -u origin main (選用) 新建的 git 連接既有的 github repo git remote add origin git@github.com:your-username/your-repo.git ssh -T git@github.com git remote set-url origin git@github.com:ZhenShuo2021/ZhenShuo2021.github.io.git\r2. (Optional) GPG 請直接看 利用 GPG 簽署 git commit 的教學。\n如果要隱藏信箱在 GPG 設定時需使用剛剛設定的 noreply 信箱。\n如果已經有 GPG key，可以用以下指令刪除：\ngit config --global --unset-all user.signingkey\r還原工作階段1 # 軟重置：只刪 commit git reset --soft \u0026lt;commit-hash\u0026gt; # 混合重置：預設方式，刪 commit 和 add git reset --mixed \u0026lt;commit-hash\u0026gt; # 硬重置：連你的寫的程式都刪了 git reset --hard \u0026lt;commit-hash\u0026gt;\r[進階] 新增部分commit Git Cherry Pick # Apply 特定 commit 到當前分支 git cherry-pick \u0026lt;commit-hash\u0026gt; # 可以連續挑選多個 commit git cherry-pick \u0026lt;commit-hash1\u0026gt; \u0026lt;commit-hash2\u0026gt; ...\r正式工作篇 By 码农高天\n一開始都一樣\ngit clone xxx.git git checkout -b \u0026lt;my-feature\u0026gt; git add \u0026lt;file\u0026gt; git commit -m \u0026lt;comments\u0026gt; # git push origin \u0026lt;my-feature\u0026gt;\r因為遠端更新，所以回到 main branch 同步遠端的新 commit，之後 rebase2 main branch，這樣就可以push。\ngit checkout main git pull origin main git checkout \u0026lt;my-featuer\u0026gt; git rebase main git push -f origin \u0026lt;my-feature\u0026gt; # Pull request 請求合併 # Squash and merge 合併並整合為一個commit # Delete branch 刪除合併完的分支\r遠端都處理好剛剛的分支後，刪除 branch 再同步 main branch。\ngit checkout main git branch -D \u0026lt;my-feature\u0026gt; git pull origin main\r別用 git pull? By Philomatics\n原理是避免 git pull 產生一堆無用的 merge conflict。其實這和码农高天的用法是一樣的，只是合併成 git pull \u0026ndash;rebase。如果沒衝突那很好，有衝突則 git rebase \u0026ndash;abort 回復再做一般的 git pull。\nrebase vs cherry-pick Rebase: 將一個分支的所有變更移到另一個分支的頂端，用於保持線性歷史\n（把此分支的修改放旁邊，加入 main 的修改，再想辦法把剛剛的修改放進來）\nCherry-pick: 選擇性地將單個 commit 應用到另一個分支，適用於只需要特定更改的情況\n（從別的分支拿功能來用）\n選用：\nRebase 移動整個分支，cherry-pick 只移動單個 commit\nRebase 重寫歷史，cherry-pick 保留原始歷史\nRebase 用於整合分支，cherry-pick 用於選擇性地應用更改\n工作目錄 (Working Directory)：硬碟實際編輯的檔案。\n暫存區 (Staging Area)：暫存你的變更，準備提交 (add的位置)。\n儲存庫 (Repository)：保存所有版本歷史的地方 (commit的位置)。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nrebase: 把此分支的修改放旁邊，加入 main 的修改，再想辦法把剛剛的修改放進來。可能需要處理 rebase conflict。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-06-02","id":22,"permalink":"/docs/notes/programming/git-%E5%9F%BA%E7%A4%8E%E6%A6%82%E5%BF%B5%E8%88%87%E5%AF%A6%E6%88%B0%E6%8C%87%E4%BB%A4/","summary":"網路上教學廢話好多好煩。\n沒人想看你把一堆 commit 版本號打出來，我還要一個一個對你在講哪個 commit，有夠蠢。\n原理篇 git是一個版本管理工具，實際使用時有三個層面，分別是你的硬碟、儲存庫 (git)、遠端儲存庫 (github/gitlab)。你的硬碟什麼都不知道，儲存庫會儲存所有版本，遠端儲存庫是最後版本。\n撰寫程式時，commit 提交新版本，push 到遠端讓大家看。\n基礎指令篇 1. 初始化 git init\r2. 索引檔案 git add \u0026lt;file-name\u0026gt; git add .","tags":[],"title":"Git 基礎概念與實戰指令"},{"content":"文件移動 mv source/ dest/ # 搬移整個資料夾 cp -rfp source/ dest/ # 複製並保留文件屬性 # r: 包含子目錄 # f: 強制複製 # p: 保留原始文件屬性 cp source/* dest # 只搬資料夾內檔案\r縮寫指令✨ 如我要把 hugo new content 縮寫成 hnc，則\necho \u0026#34;alias hnc=\u0026#39;hugo new content\u0026#39;\u0026#34; \u0026gt;\u0026gt; ~/.bashrc \u0026amp;\u0026amp; source ~/.bashrc\rmacOS 則是改為 zshrc。\n檢視硬碟容量 du /home -h | sort -nr | tail df -h sudo ncdu -x /path # ncdu 好用「非常多」\r檢視記憶體佔用 列出前十大記憶體使用\nps aux --sort=-%mem | head -n 10\r開機自動執行 這裡用docker-compose示範，五步驟分別是建立.service檔、reload .service、啟用、開始、查看狀態。參考資料[^1]。\nsudo nano /etc/systemd/system/stirling-pdf.service # 建立完成再執行以下指令 sudo systemctl daemon-reload sudo systemctl enable stirling-pdf.service sudo systemctl start stirling-pdf.service sudo systemctl status stirling-pdf.service\r其中.service指令為：\n[Unit] Description=Docker Compose app Requires=docker.service After=docker.service [Service] Type=simple Restart=always RestartSec=3 StartLimitInterval=1200 StartLimitBurst=10 TimeoutStartSec=1200 WorkingDirectory=/home/yourname/yourapp ExecStart=/usr/local/bin/docker-compose up -d ExecStop=/usr/local/bin/docker-compose down [Install] WantedBy=multi-user.target\r開機自動化也可以使用以下方式：\n# nano /etc/rc.local mount /path/mount exit 0\r設定開機自動掛載smb。\nSMB 掛載 在 etc/fstab 最下方新增：\n# 格式 \u0026lt;IP\u0026gt;/\u0026lt;遠端資料夾\u0026gt; \u0026lt;掛載本地資料夾\u0026gt; cifs credentials=\u0026lt;證書路徑\u0026gt;,_netdev,x-systemd.automount,file_mode=0777,dir_mode=0777 0 0 # 範例 //192.168.50.98/immich/external-lib /home/leo/photo cifs credentials=/home/leo/.cifs,_netdev 0 0 # _netdev: 強制系統辨識成網路硬碟 # x-systemd.automount: 自動掛載 # file_mode/dir_mode: 文件權限 # 0 0: dump備份和fsck檢查\r逗號後面可選但兩個零還是要保留。證書格式為：\nusername=遠端SMB帳戶 password=密碼\r列出時間 date timedatectl hwclock cal -H uptime who -b\r","date":"2024-05-30","id":23,"permalink":"/docs/notes/programming/%E5%B8%B8%E7%94%A8linux%E6%8C%87%E4%BB%A4/","summary":"文件移動 mv source/ dest/ # 搬移整個資料夾 cp -rfp source/ dest/ # 複製並保留文件屬性 # r: 包含子目錄 # f: 強制複製 # p: 保留原始文件屬性 cp source/* dest # 只搬資料夾內檔案\r縮寫指令✨ 如我要把 hugo new content 縮寫成 hnc，則","tags":[],"title":"常用Linux指令"},{"content":"檢視資訊 docker compose ls # 列出 compose docker container ls # 列出容器，等同 docker ps docker container stop \u0026lt;ID\u0026gt; # 取得 ID 後可一一暫停 docker system df -v # 列出硬碟相關的詳細資訊，不過列出的遠遠不只\r進入 Docker 容器內部 docker ps docker exec -it dbf85ae17c7c /bin/sh # 若 sh 不行可改成 bash\r運行控制 docker compose up -d # d: detach，獨立持續運行 docker compose stop docker compose restart docker compose rm -s -v # 不常用，s: stop, v: 移除匿名卷\r清理 docker system prune -a # 關閉停用的容器、網路、映像、快取 docker image prune -a # 清理無用映像\r","date":"2024-05-27","id":24,"permalink":"/docs/notes/programming/docker/","summary":"檢視資訊 docker compose ls # 列出 compose docker container ls # 列出容器，等同 docker ps docker container stop \u0026lt;ID\u0026gt; # 取得 ID 後可一一暫停 docker system df -v # 列出硬碟相關的詳細資訊，不過列出的遠遠不只\r進入 Docker 容器內部 docker ps docker exec -it dbf85ae17c7c /bin/sh # 若 sh 不行可改成 bash\r運行控制 docker compose up -d # d: detach，獨立持續運行 docker compose stop docker compose restart docker compose rm -s -v # 不常用，s: stop, v: 移除匿名卷\r清理 docker system prune -a # 關閉停用的容器、網路、映像、快取 docker image prune -a # 清理無用映像\r","tags":[],"title":"常用Docker指令"},{"content":"https://github.com/ZhenShuo2021/blog-script/tree/main/exiftool 腳本鏈接 (GitHub)\n這個腳本根據文件夾名稱修改照片的日期資訊，適用於從網路下載的相簿。只想看 Exiftool 指令教學請到 4.\n1. 需求 ExifTool\nWindows用戶可能需要安裝WSL或Git Bash來運行這個bash腳本。此腳本尚未在Windows上測試。\n2. 使用方法 創建一個基礎文件夾，並按“YYYYMMDD 標題”的格式命名子文件夾。 授予權限並執行： chmod 755 /path/to/script.sh /path/to/script.sh \u0026#34;/base/folder/name\u0026#34;\r享受組織良好的EXIF日期吧！（這句翻譯成中文也太怪！）\n注意事項：\n修改是基於EXIF中的DateTimeOriginal。如果缺失，則使用CreateDate。 確保為您的照片備份。您可以刪除\u0026quot;-overwrite_original\u0026quot;以保留原始照片。 不支持嵌套子文件夾。 3. 將照片按時間順序排列 當文件具有相同的時間時，按修改時間排序可能會導致順序錯亂。來源\n# 將所有照片設置為相同日期。 exiftool -overwrite_original -datetimeoriginal=\u0026#39;2022:06:14 14:10:00\u0026#39; -filemodifydate=\u0026#39;2022:06:14 14:10:00\u0026#39; DIR # 按文件名順序每個文件增加10秒。 exiftool -overwrite_original \u0026#39;-datetimeoriginal+\u0026lt;0:0:${filesequence}0\u0026#39; \u0026#39;-filemodifydate+\u0026lt;0:0:${filesequence}0\u0026#39; -fileorder filename DIR\r4. 其他EXIF命令 4.1 基本用法 按文件名每20秒遞增\nexiftool -overwrite_original \u0026#39;-FileModifyDate+\u0026lt;0:0:${FileSequence; $_*=20}\u0026#39; -FileOrder Filename\r鬆散顯示\nexiftool -s1 FILE/DIR\r只顯示指定資訊\nexiftool -DateTimeOriginal FILE/DIR\r將DateTimeOriginal分配給其他所有日期\nexiftool -r -if \u0026#39;$DateTimeOriginal\u0026#39; -P \u0026#34;-AllDates\u0026lt;DateTimeOriginal\u0026#34; \u0026#34;-FileModifyDate\u0026lt;DateTimeOriginal\u0026#34; FILE\r4.2 複製EXIF資訊 從另一文件複製EXIF資訊\nexiftool -tagsFromFile source.mpeg -FileModifyDate destination.mp4\r比較兩個文件的元數據 來源\nexiftool a.jpg b.jpg -a -G1 -w txt diff a.txt b.txt\r從另一文件複製所有標籤 來源\nexiftool -tagsfromfile A.jpg -all B.jpg\r從具有相同名稱的另一文件夾複製EXIF資訊\nexiftool -TagsFromFile ./exiftool/mpg%f.mpg -FileCreateDate -FileModifyDate ./exiftool/mp4\r官方網站 有更多複製範例。\n4.3 其他命令 按日期重命名文件：良好的命名規則可永遠避免EXIF遺失\nexiftool -d %Y%m%d_%H%M%%-c\u0026#39;-DEVICE_MODEL\u0026#39;.%%e \u0026#34;-filename\u0026lt;DateTimeOriginal\u0026#34; -fileorder DateTimeOriginal FILE\r按設備型號分類：對管理來自不同手機的照片非常有用。\nexiftool \u0026#34;-directory\u0026lt;%d/${model;}\u0026#34; -r .\r","date":"2024-03-19","id":25,"permalink":"/docs/notes/knowledge/exiftool/","summary":"https://github.com/ZhenShuo2021/blog-script/tree/main/exiftool 腳本鏈接 (GitHub)\n這個腳本根據文件夾名稱修改照片的日期資訊，適用於從網路下載的相簿。只想看 Exiftool 指令教學請到 4.\n1. 需求 ExifTool\nWindows用戶可能需要安裝WSL或Git Bash來運行這個bash腳本。此腳本尚未在Windows上測試。\n2. 使用方法 創建一個基礎文件夾，並按“YYYYMMDD 標題”的格式命名子文件夾。 授予權限並執行： chmod 755 /path/to/script.sh /path/to/script.","tags":[],"title":"ExifTool"},{"content":"@h-enk\n","date":"2023-09-12","id":26,"permalink":"/contributors/henk-verlinde/","summary":"Creator of Doks.","tags":[],"title":"Henk Verlinde"},{"content":"","date":"2023-09-12","id":27,"permalink":"/contributors/","summary":"The Doks contributors.","tags":[],"title":"Contributors"},{"content":"","date":"2023-09-07","id":28,"permalink":"/","summary":"","tags":[],"title":"ZSL Docs"},{"content":"","date":"2023-08-29","id":29,"permalink":"/showcase/","summary":"Explore the infinite possibilities of Doks","tags":[],"title":"Showcase"},{"content":"這是一個起始頁面，封面是東雲うみ。\n","date":"2000-08-02","id":30,"permalink":"/docs/intro/","summary":"這是一個起始頁面，封面是東雲うみ。","tags":[],"title":"Intro"},{"content":"","date":"0001-01-01","id":31,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":32,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]